// MLton gc73dc79-dirty (built Mon May 27 16:34:55 EDT 2013 on Tucker-Portable-Arch)
//   created this file on Thu Jun 13 23:25:33 2013.
// Do not edit this file.
// Flag settings: 
//    align: 8
//    atMLtons: (C-SSE, @MLton, --)
//    chunk: chunk per function
//    closureConvertGlobalize: true
//    closureConvertShrink: true
//    codegen: amd64
//    contifyIntoMain: false
//    debug: false
//    defaultChar: char8
//    defaultWideChar: widechar32
//    defaultInt: int32
//    defaultReal: real64
//    defaultWord: word32
//    diag passes: []
//    drop passes: []
//    elaborate allowConstant (default): false
//    elaborate allowConstant (enabled): true
//    elaborate allowFFI (default): true
//    elaborate allowFFI (enabled): true
//    elaborate allowPrim (default): false
//    elaborate allowPrim (enabled): true
//    elaborate allowOverload (default): false
//    elaborate allowOverload (enabled): true
//    elaborate allowRebindEquals (default): false
//    elaborate allowRebindEquals (enabled): true
//    elaborate deadCode (default): false
//    elaborate deadCode (enabled): true
//    elaborate forceUsed (default): false
//    elaborate forceUsed (enabled): true
//    elaborate ffiStr (default): 
//    elaborate ffiStr (enabled): true
//    elaborate nonexhaustiveExnMatch (default): default
//    elaborate nonexhaustiveExnMatch (enabled): true
//    elaborate nonexhaustiveMatch (default): warn
//    elaborate nonexhaustiveMatch (enabled): true
//    elaborate redundantMatch (default): warn
//    elaborate redundantMatch (enabled): true
//    elaborate resolveScope (default): strdec
//    elaborate resolveScope (enabled): true
//    elaborate sequenceNonUnit (default): ignore
//    elaborate sequenceNonUnit (enabled): true
//    elaborate warnUnused (default): false
//    elaborate warnUnused (enabled): true
//    elaborate only: false
//    emit main: true
//    export header: None
//    exn history: false
//    generated output format: executable
//    gc check: Limit
//    indentation: 3
//    inlineIntoMain: true
//    inlineLeafA: {loops = true, repeat = true, size = Some 20}
//    inlineLeafB: {loops = true, repeat = true, size = Some 40}
//    inlineNonRec: {small = 60, product = 320}
//    input file: C-SSE.ssa.main_0.dom.dot
//    keep CoreML: false
//    keep def use: true
//    keep dot: true
//    keep Machine: true
//    keep passes: []
//    keep RSSA: true
//    keep SSA: true
//    keep SSA2: true
//    keep SXML: true
//    keep XML: true
//    extra_: false
//    lib dir: /home/tucker/usr/lib/mlton
//    lib target dir: /home/tucker/usr/lib/mlton/targets/self
//    loop passes: 1
//    mark cards: true
//    max function size: 10000
//    mlb path vars: [{var = MLTON_ROOT, path = $(LIB_MLTON_DIR)/sml}, {var = SML_LIB, path = $(LIB_MLTON_DIR)/sml}]
//    native commented: 0
//    native live stack: false
//    native optimize: 1
//    native move hoist: true
//    native copy prop: true
//    native copy prop cutoff: 1000
//    native cutoff: 100
//    native live transfer: 8
//    native shuffle: true
//    native ieee fp: false
//    native split: Some 20000
//    optimizationPasses: [<ssa2::default>, <ssa::default>, <sxml::default>, <xml::default>]
//    polyvariance: Some {hofo = true, rounds = 2, small = 30, product = 300}
//    prefer abs paths: false
//    prof passes: []
//    profile: None
//    profile branch: false
//    profile C: []
//    profile IL: ProfileSource
//    profile include/exclude: [(Seq [Star [.], Or [Seq [Seq [[$], [(], [S], [M], [L], [_], [L], [I], [B], [)]]]], Star [.]], false)]
//    profile raise: false
//    profile stack: false
//    profile val: false
//    show basis: Some C-SSE.basis
//    show def-use: Some C-SSE.def_use
//    show types: true
//    target: self
//    target arch: AMD64
//    target OS: Linux
//    type check: false
//    verbosity: Silent
//    warn unrecognized annotation: true
//    warn deprecated features: true
//    zone cut depth: 100
digraph "main_0 dominator tree" {
label = "main_0 dominator tree"
n11 [label = "L_11\n"]
n14 [label = "L_13\n"]
n17 [label = "L_15\n"]
n22 [label = "L_20\n"]
n23 [label = "L_19\n"]
n24 [label = "L_21\n"]
n21 [label = "L_18\n"]
n21 -> n24 []
n21 -> n23 []
n21 -> n22 []
n20 [label = "L_17\n"]
n20 -> n21 []
n27 [label = "L_23\n"]
n30 [label = "L_25\n"]
n33 [label = "L_27\n"]
n36 [label = "L_29\n"]
n40 [label = "L_34\n"]
n42 [label = "L_41\n"]
n43 [label = "L_40\n"]
n44 [label = "L_39\n"]
n41 [label = "L_33\n"]
n41 -> n44 []
n41 -> n43 []
n41 -> n42 []
n47 [label = "L_37\n"]
n46 [label = "print_1\n"]
n46 -> n47 []
n45 [label = "L_35\n"]
n45 -> n46 []
n49 [label = "L_38\n"]
n48 [label = "L_36\n"]
n48 -> n49 []
n39 [label = "L_32\n"]
n39 -> n48 []
n39 -> n45 []
n39 -> n41 []
n39 -> n40 []
n38 [label = "L_31\n"]
n38 -> n39 []
n50 [label = "L_30\n"]
n37 [label = "L_28\n"]
n37 -> n50 []
n37 -> n38 []
n35 [label = "loop_41\n"]
n35 -> n37 []
n35 -> n36 []
n34 [label = "L_26\n"]
n34 -> n35 []
n32 [label = "loop_40\n"]
n32 -> n34 []
n32 -> n33 []
n31 [label = "L_24\n"]
n31 -> n32 []
n29 [label = "loop_39\n"]
n29 -> n31 []
n29 -> n30 []
n28 [label = "L_22\n"]
n28 -> n29 []
n26 [label = "loop_38\n"]
n26 -> n28 []
n26 -> n27 []
n25 [label = "L_16\n"]
n25 -> n26 []
n19 [label = "loop_37\n"]
n19 -> n25 []
n19 -> n20 []
n18 [label = "L_14\n"]
n18 -> n19 []
n16 [label = "loop_36\n"]
n16 -> n18 []
n16 -> n17 []
n15 [label = "L_12\n"]
n15 -> n16 []
n13 [label = "loop_35\n"]
n13 -> n15 []
n13 -> n14 []
n12 [label = "L_10\n"]
n12 -> n13 []
n10 [label = "loop_34\n"]
n10 -> n12 []
n10 -> n11 []
n9 [label = "L_9\n"]
n9 -> n10 []
n51 [label = "loop_33\n"]
n8 [label = "L_8\n"]
n8 -> n51 []
n8 -> n9 []
n53 [label = "L_42\n"]
n54 [label = "L_43\n"]
n52 [label = "L_7\n"]
n52 -> n54 []
n52 -> n53 []
n7 [label = "loop_32\n"]
n7 -> n52 []
n7 -> n8 []
n6 [label = "L_6\n"]
n6 -> n7 []
n55 [label = "loop_31\n"]
n5 [label = "L_5\n"]
n5 -> n55 []
n5 -> n6 []
n57 [label = "L_45\n"]
n58 [label = "L_46\n"]
n56 [label = "L_4\n"]
n56 -> n58 []
n56 -> n57 []
n4 [label = "loop_30\n"]
n4 -> n56 []
n4 -> n5 []
n3 [label = "L_3\n"]
n3 -> n4 []
n59 [label = "loop_29\n"]
n2 [label = "L_2\n"]
n2 -> n59 []
n2 -> n3 []
n61 [label = "L_47\n"]
n62 [label = "L_48\n"]
n60 [label = "L_1\n"]
n60 -> n62 []
n60 -> n61 []
n63 [label = "L_44\n"]
n1 [label = "loop_28\n"]
n1 -> n63 []
n1 -> n60 []
n1 -> n2 []
n0 [label = "L_0\n"]
n0 -> n1 []
}
