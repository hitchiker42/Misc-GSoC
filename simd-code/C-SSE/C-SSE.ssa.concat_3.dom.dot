// MLton gc73dc79-dirty (built Mon May 27 16:34:55 EDT 2013 on Tucker-Portable-Arch)
//   created this file on Thu Jun 13 16:50:06 2013.
// Do not edit this file.
// Flag settings: 
//    align: 8
//    atMLtons: (C-SSE, @MLton, --)
//    chunk: chunk per function
//    closureConvertGlobalize: true
//    closureConvertShrink: true
//    codegen: amd64
//    contifyIntoMain: false
//    debug: false
//    defaultChar: char8
//    defaultWideChar: widechar32
//    defaultInt: int32
//    defaultReal: real64
//    defaultWord: word32
//    diag passes: []
//    drop passes: []
//    elaborate allowConstant (default): false
//    elaborate allowConstant (enabled): true
//    elaborate allowFFI (default): true
//    elaborate allowFFI (enabled): true
//    elaborate allowPrim (default): false
//    elaborate allowPrim (enabled): true
//    elaborate allowOverload (default): false
//    elaborate allowOverload (enabled): true
//    elaborate allowRebindEquals (default): false
//    elaborate allowRebindEquals (enabled): true
//    elaborate deadCode (default): false
//    elaborate deadCode (enabled): true
//    elaborate forceUsed (default): false
//    elaborate forceUsed (enabled): true
//    elaborate ffiStr (default): 
//    elaborate ffiStr (enabled): true
//    elaborate nonexhaustiveExnMatch (default): default
//    elaborate nonexhaustiveExnMatch (enabled): true
//    elaborate nonexhaustiveMatch (default): warn
//    elaborate nonexhaustiveMatch (enabled): true
//    elaborate redundantMatch (default): warn
//    elaborate redundantMatch (enabled): true
//    elaborate resolveScope (default): strdec
//    elaborate resolveScope (enabled): true
//    elaborate sequenceNonUnit (default): ignore
//    elaborate sequenceNonUnit (enabled): true
//    elaborate warnUnused (default): false
//    elaborate warnUnused (enabled): true
//    elaborate only: false
//    emit main: true
//    export header: None
//    exn history: false
//    generated output format: executable
//    gc check: Limit
//    indentation: 3
//    inlineIntoMain: true
//    inlineLeafA: {loops = true, repeat = true, size = Some 20}
//    inlineLeafB: {loops = true, repeat = true, size = Some 40}
//    inlineNonRec: {small = 60, product = 320}
//    input file: C-SSE.ssa.concat_3.dom.dot
//    keep CoreML: false
//    keep def use: true
//    keep dot: true
//    keep Machine: true
//    keep passes: []
//    keep RSSA: true
//    keep SSA: true
//    keep SSA2: true
//    keep SXML: true
//    keep XML: true
//    extra_: false
//    lib dir: /home/tucker/usr/lib/mlton
//    lib target dir: /home/tucker/usr/lib/mlton/targets/self
//    loop passes: 1
//    mark cards: true
//    max function size: 10000
//    mlb path vars: [{var = MLTON_ROOT, path = $(LIB_MLTON_DIR)/sml}, {var = SML_LIB, path = $(LIB_MLTON_DIR)/sml}]
//    native commented: 0
//    native live stack: false
//    native optimize: 1
//    native move hoist: true
//    native copy prop: true
//    native copy prop cutoff: 1000
//    native cutoff: 100
//    native live transfer: 8
//    native shuffle: true
//    native ieee fp: false
//    native split: Some 20000
//    optimizationPasses: [<ssa2::default>, <ssa::default>, <sxml::default>, <xml::default>]
//    polyvariance: Some {hofo = true, rounds = 2, small = 30, product = 300}
//    prefer abs paths: false
//    prof passes: []
//    profile: None
//    profile branch: false
//    profile C: []
//    profile IL: ProfileSource
//    profile include/exclude: [(Seq [Star [.], Or [Seq [Seq [[$], [(], [S], [M], [L], [_], [L], [I], [B], [)]]]], Star [.]], false)]
//    profile raise: false
//    profile stack: false
//    profile val: false
//    show basis: Some C-SSE.basis
//    show def-use: Some C-SSE.def_use
//    show types: true
//    target: self
//    target arch: AMD64
//    target OS: Linux
//    type check: false
//    verbosity: Silent
//    warn unrecognized annotation: true
//    warn deprecated features: true
//    zone cut depth: 100
digraph "concat_3 dominator tree" {
label = "concat_3 dominator tree"
n2 [label = "L_52\n"]
n1 [label = "L_51\n"]
n1 -> n2 []
n9 [label = "L_62\n"]
n11 [label = "L_64\n"]
n13 [label = "L_69\n"]
n14 [label = "L_68\n"]
n12 [label = "L_63\n"]
n12 -> n14 []
n12 -> n13 []
n17 [label = "L_67\n"]
n18 [label = "L_66\n"]
n16 [label = "loop_42\n"]
n16 -> n18 []
n16 -> n17 []
n15 [label = "L_65\n"]
n15 -> n16 []
n10 [label = "L_61\n"]
n10 -> n15 []
n10 -> n12 []
n10 -> n11 []
n8 [label = "L_59\n"]
n8 -> n10 []
n8 -> n9 []
n22 [label = "L_74\n"]
n24 [label = "L_83\n"]
n25 [label = "L_82\n"]
n23 [label = "L_73\n"]
n23 -> n25 []
n23 -> n24 []
n30 [label = "L_79\n"]
n32 [label = "L_81\n"]
n33 [label = "L_80\n"]
n31 [label = "L_78\n"]
n31 -> n33 []
n31 -> n32 []
n29 [label = "loop_44\n"]
n29 -> n31 []
n29 -> n30 []
n28 [label = "L_77\n"]
n28 -> n29 []
n34 [label = "L_76\n"]
n27 [label = "loop_43\n"]
n27 -> n34 []
n27 -> n28 []
n26 [label = "L_75\n"]
n26 -> n27 []
n21 [label = "L_72\n"]
n21 -> n26 []
n21 -> n23 []
n21 -> n22 []
n35 [label = "L_71\n"]
n20 [label = "L_70\n"]
n20 -> n35 []
n20 -> n21 []
n19 [label = "L_60\n"]
n19 -> n20 []
n7 [label = "L_58\n"]
n7 -> n19 []
n7 -> n8 []
n36 [label = "L_57\n"]
n6 [label = "L_56\n"]
n6 -> n36 []
n6 -> n7 []
n5 [label = "L_55\n"]
n5 -> n6 []
n37 [label = "L_54\n"]
n4 [label = "L_53\n"]
n4 -> n37 []
n4 -> n5 []
n3 [label = "L_50\n"]
n3 -> n4 []
n0 [label = "L_49\n"]
n0 -> n3 []
n0 -> n1 []
}
