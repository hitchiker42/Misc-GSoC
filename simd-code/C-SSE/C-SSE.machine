MLton gc73dc79-dirty (built Mon May 27 16:34:55 EDT 2013 on Tucker-Portable-Arch)
  created this file on Thu Jun 13 23:25:33 2013.
Do not edit this file.
Flag settings: 
   align: 8
   atMLtons: (C-SSE, @MLton, --)
   chunk: chunk per function
   closureConvertGlobalize: true
   closureConvertShrink: true
   codegen: amd64
   contifyIntoMain: false
   debug: false
   defaultChar: char8
   defaultWideChar: widechar32
   defaultInt: int32
   defaultReal: real64
   defaultWord: word32
   diag passes: []
   drop passes: []
   elaborate allowConstant (default): false
   elaborate allowConstant (enabled): true
   elaborate allowFFI (default): true
   elaborate allowFFI (enabled): true
   elaborate allowPrim (default): false
   elaborate allowPrim (enabled): true
   elaborate allowOverload (default): false
   elaborate allowOverload (enabled): true
   elaborate allowRebindEquals (default): false
   elaborate allowRebindEquals (enabled): true
   elaborate deadCode (default): false
   elaborate deadCode (enabled): true
   elaborate forceUsed (default): false
   elaborate forceUsed (enabled): true
   elaborate ffiStr (default): 
   elaborate ffiStr (enabled): true
   elaborate nonexhaustiveExnMatch (default): default
   elaborate nonexhaustiveExnMatch (enabled): true
   elaborate nonexhaustiveMatch (default): warn
   elaborate nonexhaustiveMatch (enabled): true
   elaborate redundantMatch (default): warn
   elaborate redundantMatch (enabled): true
   elaborate resolveScope (default): strdec
   elaborate resolveScope (enabled): true
   elaborate sequenceNonUnit (default): ignore
   elaborate sequenceNonUnit (enabled): true
   elaborate warnUnused (default): false
   elaborate warnUnused (enabled): true
   elaborate only: false
   emit main: true
   export header: None
   exn history: false
   generated output format: executable
   gc check: Limit
   indentation: 3
   inlineIntoMain: true
   inlineLeafA: {loops = true, repeat = true, size = Some 20}
   inlineLeafB: {loops = true, repeat = true, size = Some 40}
   inlineNonRec: {small = 60, product = 320}
   input file: C-SSE.machine
   keep CoreML: false
   keep def use: true
   keep dot: true
   keep Machine: true
   keep passes: []
   keep RSSA: true
   keep SSA: true
   keep SSA2: true
   keep SXML: true
   keep XML: true
   extra_: false
   lib dir: /home/tucker/usr/lib/mlton
   lib target dir: /home/tucker/usr/lib/mlton/targets/self
   loop passes: 1
   mark cards: true
   max function size: 10000
   mlb path vars: [{var = MLTON_ROOT, path = $(LIB_MLTON_DIR)/sml}, {var = SML_LIB, path = $(LIB_MLTON_DIR)/sml}]
   native commented: 0
   native live stack: false
   native optimize: 1
   native move hoist: true
   native copy prop: true
   native copy prop cutoff: 1000
   native cutoff: 100
   native live transfer: 8
   native shuffle: true
   native ieee fp: false
   native split: Some 20000
   optimizationPasses: [<ssa2::default>, <ssa::default>, <sxml::default>, <xml::default>]
   polyvariance: Some {hofo = true, rounds = 2, small = 30, product = 300}
   prefer abs paths: false
   prof passes: []
   profile: None
   profile branch: false
   profile C: []
   profile IL: ProfileSource
   profile include/exclude: [(Seq [Star [.], Or [Seq [Seq [[$], [(], [S], [M], [L], [_], [L], [I], [B], [)]]]], Star [.]], false)]
   profile raise: false
   profile stack: false
   profile val: false
   show basis: Some C-SSE.basis
   show def-use: Some C-SSE.def_use
   show types: true
   target: self
   target arch: AMD64
   target OS: Linux
   type check: false
   verbosity: Silent
   warn unrecognized annotation: true
   warn deprecated features: true
   zone cut depth: 100
{handlesSignals = false,
 main = F_0,
 maxFrameSize = 40,
 frameOffsets = ((), (0), (0, 8)),
 frameLayouts = ({frameOffsetsIndex = 0, isC = true, size = 8},
		 {frameOffsetsIndex = 0, isC = false, size = 8},
		 {frameOffsetsIndex = 1, isC = true, size = 16},
		 {frameOffsetsIndex = 2, isC = true, size = 40},
		 {frameOffsetsIndex = 1, isC = true, size = 32})}

ObjectTypes:
opt_0 = Stack
opt_1 = Normal {hasIdentity = true, ty = [Word64, ExnStack, Objptr (opt_0)]}
opt_2 = Weak None
opt_3 = Array {elt = Word8, hasIdentity = false}
opt_4 = Array {elt = Word32, hasIdentity = false}
opt_5 = Array {elt = Word16, hasIdentity = false}
opt_6 = Array {elt = Word64, hasIdentity = false}
opt_7 = Normal {hasIdentity = false, ty = [Word64, Objptr (opt_3)]}
opt_8 = Array {elt = Word8, hasIdentity = true}
opt_9 = Normal {hasIdentity = true, ty = Objptr (opt_11)}
opt_10 = Normal {hasIdentity = true, ty = [Word32, Bits32]}
opt_11 = Normal {hasIdentity = false, ty = [Word2, Bits62, Objptr (opt_11)]}
opt_12 = Normal {hasIdentity = false,
		 ty = [Word8, Word8, Bits48, Objptr (opt_12)]}
opt_13 = Normal {hasIdentity = false, ty = [Objptr (opt_3), Objptr (opt_13)]}
opt_14 = Normal {hasIdentity = false, ty = [Objptr (opt_7), Objptr (opt_14)]}
opt_15 = Normal {hasIdentity = false, ty = Objptr (opt_15)}


L_107: {kind = CReturn {dst = None,
			frameInfo = Some {frameLayoutsIndex = 0},
			func = {args = (GCState, Word64, Word32),
				bytesNeeded = None,
				convention = cdecl,
				ensuresBytesFree = true,
				mayGC = true,
				maySwitchThreads = false,
				modifiesFrontier = true,
				prototype = {args = (CPointer, Word64, Int32),
					     res = None},
				readsStackTop = true,
				return = Bits0,
				symbolScope = private,
				target = GC_collect,
				writesStackTop = true}},
	live = (),
	raises = None,
	returns = None}
    Goto L_102
L_100: {kind = Jump, live = (), raises = None, returns = None}
    CCall {args = (<GCState>, 0x0, 0x0),
	   frameInfo = Some {frameLayoutsIndex = 0},
	   func = {args = (GCState, Word64, Word32),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int32), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = GC_collect,
		   writesStackTop = true},
	   return = Some L_107}
L_106: {kind = Cont {args = (), frameInfo = {frameLayoutsIndex = 1}},
	live = (),
	raises = None,
	returns = None}
    CCall {args = (glob {index = 8, isRoot = true, ty = Objptr (opt_3)}),
	   frameInfo = None,
	   func = {args = (Objptr (opt_3)),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = false,
		   mayGC = false,
		   maySwitchThreads = false,
		   modifiesFrontier = false,
		   prototype = {args = (Objptr), res = None},
		   readsStackTop = false,
		   return = Bits0,
		   symbolScope = private,
		   target = MLton_bug,
		   writesStackTop = false},
	   return = None}
L_105: {kind = CReturn {dst = Some glob {index = 3,
					 isRoot = true,
					 ty = Objptr (opt_8)},
			frameInfo = Some {frameLayoutsIndex = 0},
			func = {args = (GCState, Word64, Word64, Word64),
				bytesNeeded = None,
				convention = cdecl,
				ensuresBytesFree = true,
				mayGC = true,
				maySwitchThreads = false,
				modifiesFrontier = true,
				prototype = {args = (CPointer,
						     Word64,
						     Int64,
						     Word64),
					     res = Some Objptr},
				readsStackTop = true,
				return = Objptr (opt_8),
				symbolScope = private,
				target = GC_arrayAllocate,
				writesStackTop = true}},
	live = (),
	raises = None,
	returns = None}
    CW64 (<Frontier>)  = 0x19
    RQ(3): CPointer  = CPointer_add (<Frontier>, 0x8)
    glob {index = 4, isRoot = true, ty = Objptr (opt_12)}
     = Cast (RQ(3): CPointer, Objptr (opt_12))
    <Frontier>  = CPointer_add (<Frontier>, 0x18)
    glob {index = 2, isRoot = true, ty = Bits32}
     = WordU16_extdToWord32 (Cast (0x4641, [Word8, Word8]))
    OW32 (glob {index = 4, isRoot = true, ty = Objptr (opt_12)}, 0): [Word8,
								      Word8,
								      Bits16]
     = Cast (glob {index = 2, isRoot = true, ty = Bits32},
	     [Word8, Word8, Bits16])
    OW32 (glob {index = 4, isRoot = true, ty = Objptr (opt_12)}, 4): Bits32
     = Cast (0x0, Bits32)
    OP (glob {index = 4, isRoot = true, ty = Objptr (opt_12)}, 8): Objptr (opt_12)
     = Cast (0x1, Objptr (opt_12))
    CW64 (<Frontier>)  = 0x19
    RQ(2): CPointer  = CPointer_add (<Frontier>, 0x8)
    glob {index = 5, isRoot = true, ty = Objptr (opt_12)}
     = Cast (RQ(2): CPointer, Objptr (opt_12))
    <Frontier>  = CPointer_add (<Frontier>, 0x18)
    glob {index = 3, isRoot = true, ty = Bits32}
     = WordU16_extdToWord32 (Cast (0x6661, [Word8, Word8]))
    OW32 (glob {index = 5, isRoot = true, ty = Objptr (opt_12)}, 0): [Word8,
								      Word8,
								      Bits16]
     = Cast (glob {index = 3, isRoot = true, ty = Bits32},
	     [Word8, Word8, Bits16])
    OW32 (glob {index = 5, isRoot = true, ty = Objptr (opt_12)}, 4): Bits32
     = Cast (0x0, Bits32)
    OP (glob {index = 5, isRoot = true, ty = Objptr (opt_12)}, 8): Objptr (opt_12)
     = glob {index = 4, isRoot = true, ty = Objptr (opt_12)}
    CW64 (<Frontier>)  = 0x1B
    RQ(1): CPointer  = CPointer_add (<Frontier>, 0x8)
    glob {index = 6, isRoot = true, ty = Objptr (opt_13)}
     = Cast (RQ(1): CPointer, Objptr (opt_13))
    <Frontier>  = CPointer_add (<Frontier>, 0x18)
    OP (glob {index = 6, isRoot = true, ty = Objptr (opt_13)}, 0): Objptr (opt_3)
     = glob {index = 7, isRoot = true, ty = Objptr (opt_3)}
    OP (glob {index = 6, isRoot = true, ty = Objptr (opt_13)}, 8): Objptr (opt_13)
     = Cast (0x1, Objptr (opt_13))
    Call {label = main_0,
	  live = (),
	  return = Some {return = L_106, handler = None, size = 8}}
L_104: {kind = CReturn {dst = Some glob {index = 2,
					 isRoot = true,
					 ty = Objptr (opt_8)},
			frameInfo = Some {frameLayoutsIndex = 0},
			func = {args = (GCState, Word64, Word64, Word64),
				bytesNeeded = None,
				convention = cdecl,
				ensuresBytesFree = true,
				mayGC = true,
				maySwitchThreads = false,
				modifiesFrontier = true,
				prototype = {args = (CPointer,
						     Word64,
						     Int64,
						     Word64),
					     res = Some Objptr},
				readsStackTop = true,
				return = Objptr (opt_8),
				symbolScope = private,
				target = GC_arrayAllocate,
				writesStackTop = true}},
	live = (),
	raises = None,
	returns = None}
    CCall {args = (<GCState>, 0x48, 0x0, 0x11),
	   frameInfo = Some {frameLayoutsIndex = 0},
	   func = {args = (GCState, Word64, Word64, Word64),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int64, Word64),
				res = Some Objptr},
		   readsStackTop = true,
		   return = Objptr (opt_8),
		   symbolScope = private,
		   target = GC_arrayAllocate,
		   writesStackTop = true},
	   return = Some L_105}
L_103: {kind = CReturn {dst = Some glob {index = 1,
					 isRoot = true,
					 ty = Objptr (opt_8)},
			frameInfo = Some {frameLayoutsIndex = 0},
			func = {args = (GCState, Word64, Word64, Word64),
				bytesNeeded = None,
				convention = cdecl,
				ensuresBytesFree = true,
				mayGC = true,
				maySwitchThreads = false,
				modifiesFrontier = true,
				prototype = {args = (CPointer,
						     Word64,
						     Int64,
						     Word64),
					     res = Some Objptr},
				readsStackTop = true,
				return = Objptr (opt_8),
				symbolScope = private,
				target = GC_arrayAllocate,
				writesStackTop = true}},
	live = (),
	raises = None,
	returns = None}
    CCall {args = (<GCState>, 0x48, 0x0, 0x11),
	   frameInfo = Some {frameLayoutsIndex = 0},
	   func = {args = (GCState, Word64, Word64, Word64),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int64, Word64),
				res = Some Objptr},
		   readsStackTop = true,
		   return = Objptr (opt_8),
		   symbolScope = private,
		   target = GC_arrayAllocate,
		   writesStackTop = true},
	   return = Some L_104}
L_102: {kind = Jump, live = (), raises = None, returns = None}
    CW64 (<Frontier>)  = 0x1F
    RQ(0): CPointer  = CPointer_add (<Frontier>, 0x8)
    glob {index = 0, isRoot = true, ty = Objptr (opt_15)}
     = Cast (RQ(0): CPointer, Objptr (opt_15))
    <Frontier>  = CPointer_add (<Frontier>, 0x10)
    OP (glob {index = 0, isRoot = true, ty = Objptr (opt_15)}, 0): Objptr (opt_15)
     = Cast (0x1, Objptr (opt_15))
    CCall {args = (<GCState>, 0x48, 0x0, 0x11),
	   frameInfo = Some {frameLayoutsIndex = 0},
	   func = {args = (GCState, Word64, Word64, Word64),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int64, Word64),
				res = Some Objptr},
		   readsStackTop = true,
		   return = Objptr (opt_8),
		   symbolScope = private,
		   target = GC_arrayAllocate,
		   writesStackTop = true},
	   return = Some L_103}
L_101: {kind = Jump, live = (), raises = None, returns = None}
    glob {index = 1, isRoot = true, ty = Word32}
     = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
    switch {test = glob {index = 1, isRoot = true, ty = Word32},
	    default = None,
	    cases = ((0x0, L_102), (0x1, L_100))}
L_99: {kind = Jump, live = (), raises = None, returns = None}
    glob {index = 0, isRoot = true, ty = Word32}
     = CPointer_lt (OQ (<GCState>, 24): CPointer, <StackTop>)
    switch {test = glob {index = 0, isRoot = true, ty = Word32},
	    default = None,
	    cases = ((0x0, L_101), (0x1, L_100))}
F_0: {kind = Func, live = (), raises = None, returns = None}
    Goto L_99
L_177: {kind = CReturn {dst = None,
			frameInfo = Some {frameLayoutsIndex = 0},
			func = {args = (GCState, Word64, Word32),
				bytesNeeded = None,
				convention = cdecl,
				ensuresBytesFree = true,
				mayGC = true,
				maySwitchThreads = false,
				modifiesFrontier = true,
				prototype = {args = (CPointer, Word64, Int32),
					     res = None},
				readsStackTop = true,
				return = Bits0,
				symbolScope = private,
				target = GC_collect,
				writesStackTop = true}},
	live = (),
	raises = None,
	returns = Some ()}
    Goto L_109
L_108: {kind = Jump, live = (), raises = None, returns = Some ()}
    CCall {args = (<GCState>, 0x0, 0x0),
	   frameInfo = Some {frameLayoutsIndex = 0},
	   func = {args = (GCState, Word64, Word32),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int32), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = GC_collect,
		   writesStackTop = true},
	   return = Some L_177}
L_176: {kind = CReturn {dst = None,
			frameInfo = Some {frameLayoutsIndex = 4},
			func = {args = (GCState, Word64, Word32),
				bytesNeeded = None,
				convention = cdecl,
				ensuresBytesFree = true,
				mayGC = true,
				maySwitchThreads = false,
				modifiesFrontier = true,
				prototype = {args = (CPointer, Word64, Int32),
					     res = None},
				readsStackTop = true,
				return = Bits0,
				symbolScope = private,
				target = GC_collect,
				writesStackTop = true}},
	live = (SW64(16): Word64, SW64(8): Word64, SP(0): Objptr (opt_15)),
	raises = None,
	returns = Some ()}
    Goto L_111
L_110: {kind = Jump,
	live = (SW64(16): Word64, SW64(8): Word64, SP(0): Objptr (opt_15)),
	raises = None,
	returns = Some ()}
    CCall {args = (<GCState>, 0x0, 0x0),
	   frameInfo = Some {frameLayoutsIndex = 4},
	   func = {args = (GCState, Word64, Word32),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int32), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = GC_collect,
		   writesStackTop = true},
	   return = Some L_176}
L_120: {kind = Jump, live = (), raises = None, returns = Some ()}
    Goto L_3
L_175: {kind = CReturn {dst = None,
			frameInfo = Some {frameLayoutsIndex = 0},
			func = {args = (GCState, Word64, Word32),
				bytesNeeded = None,
				convention = cdecl,
				ensuresBytesFree = true,
				mayGC = true,
				maySwitchThreads = false,
				modifiesFrontier = true,
				prototype = {args = (CPointer, Word64, Int32),
					     res = None},
				readsStackTop = true,
				return = Bits0,
				symbolScope = private,
				target = GC_collect,
				writesStackTop = true}},
	live = (),
	raises = None,
	returns = Some ()}
    Goto L_124
L_123: {kind = Jump, live = (), raises = None, returns = Some ()}
    CCall {args = (<GCState>, 0x0, 0x0),
	   frameInfo = Some {frameLayoutsIndex = 0},
	   func = {args = (GCState, Word64, Word32),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int32), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = GC_collect,
		   writesStackTop = true},
	   return = Some L_175}
L_174: {kind = CReturn {dst = None,
			frameInfo = Some {frameLayoutsIndex = 3},
			func = {args = (GCState, Word64, Word32),
				bytesNeeded = None,
				convention = cdecl,
				ensuresBytesFree = true,
				mayGC = true,
				maySwitchThreads = false,
				modifiesFrontier = true,
				prototype = {args = (CPointer, Word64, Int32),
					     res = None},
				readsStackTop = true,
				return = Bits0,
				symbolScope = private,
				target = GC_collect,
				writesStackTop = true}},
	live = (SW64(24): Word64,
		SW64(16): Word64,
		SP(8): Objptr (opt_15),
		SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    Goto L_126
L_125: {kind = Jump,
	live = (SW64(24): Word64,
		SW64(16): Word64,
		SP(8): Objptr (opt_15),
		SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    CCall {args = (<GCState>, 0x0, 0x0),
	   frameInfo = Some {frameLayoutsIndex = 3},
	   func = {args = (GCState, Word64, Word32),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int32), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = GC_collect,
		   writesStackTop = true},
	   return = Some L_174}
L_131: {kind = Jump,
	live = (SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    Goto L_6
L_173: {kind = CReturn {dst = None,
			frameInfo = Some {frameLayoutsIndex = 3},
			func = {args = (GCState, Word64, Word32),
				bytesNeeded = None,
				convention = cdecl,
				ensuresBytesFree = true,
				mayGC = true,
				maySwitchThreads = false,
				modifiesFrontier = true,
				prototype = {args = (CPointer, Word64, Int32),
					     res = None},
				readsStackTop = true,
				return = Bits0,
				symbolScope = private,
				target = GC_collect,
				writesStackTop = true}},
	live = (SW64(24): Word64,
		SW64(16): Word64,
		SP(8): Objptr (opt_15),
		SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    Goto L_135
L_134: {kind = Jump,
	live = (SW64(24): Word64,
		SW64(16): Word64,
		SP(8): Objptr (opt_15),
		SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    CCall {args = (<GCState>, 0x0, 0x0),
	   frameInfo = Some {frameLayoutsIndex = 3},
	   func = {args = (GCState, Word64, Word32),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int32), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = GC_collect,
		   writesStackTop = true},
	   return = Some L_173}
L_140: {kind = Jump,
	live = (SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    Goto L_9
L_143: {kind = Jump,
	live = (RW64(0): Word64, SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RW64(1): Word64  = Word64_add (0x1, RW64(0): Word64)
    RW64(0): Word64  = RW64(1): Word64
    Goto loop_34
L_145: {kind = Jump,
	live = (RW64(0): Word64, SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
    RW64(0): Word64  = RW64(1): Word64
    Goto loop_35
L_147: {kind = Jump,
	live = (RW64(0): Word64, SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
    RW64(0): Word64  = RW64(1): Word64
    Goto loop_36
L_167: {kind = Jump,
	live = (RP(0): Objptr (opt_12),
		RW8(0): Word8,
		RW64(0): Word64,
		SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    Goto L_20
L_172: {kind = Jump,
	live = (RW64(0): Word64, SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    Goto L_21
L_171: {kind = Jump,
	live = (RP(0): Objptr (opt_12),
		RW8(0): Word8,
		RW64(0): Word64,
		SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RP(1): Objptr (opt_12)  = OP (RP(0): Objptr (opt_12), 8): Objptr (opt_12)
    RW16(0): [Word8, Word8]  = OW16 (RP(0): Objptr (opt_12), 0): [Word8, Word8]
    RP(0): Objptr (opt_12)  = RP(1): Objptr (opt_12)
    Goto L_18
L_20: {kind = Jump,
       live = (RP(0): Objptr (opt_12),
	       RW8(0): Word8,
	       RW64(0): Word64,
	       SP(0): Objptr (opt_9)),
       raises = None,
       returns = Some ()}
    switch {test = Cast (RP(0): Objptr (opt_12), Bits64),
	    default = Some L_171,
	    cases = ((0x1, L_172))}
L_169: {kind = Jump,
	live = (RP(0): Objptr (opt_12),
		RW8(0): Word8,
		RW64(0): Word64,
		SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    Goto L_20
L_21: {kind = Jump,
       live = (RW64(0): Word64, SP(0): Objptr (opt_9)),
       raises = None,
       returns = Some ()}
    RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
    RW64(0): Word64  = RW64(1): Word64
    Goto loop_37
L_170: {kind = Jump,
	live = (RW64(0): Word64, SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    Goto L_21
L_168: {kind = Jump,
	live = (RW8(1): Word8,
		RP(0): Objptr (opt_12),
		RW8(0): Word8,
		RW64(0): Word64,
		SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RW32(0): Word32  = WordU8_lt (RW8(1): Word8, RW8(0): Word8)
    switch {test = RW32(0): Word32,
	    default = None,
	    cases = ((0x0, L_170), (0x1, L_169))}
L_18: {kind = Jump,
       live = (RW16(0): [Word8, Word8],
	       RP(0): Objptr (opt_12),
	       RW8(0): Word8,
	       RW64(0): Word64,
	       SP(0): Objptr (opt_9)),
       raises = None,
       returns = Some ()}
    RW16(1): [Word8, Word8]  = WordU16_rshift (RW16(0): [Word8, Word8], 0x8)
    RW8(1): Word8  = WordU16_extdToWord8 (RW16(1): [Word8, Word8])
    RW8(2): Word8  = WordU16_extdToWord8 (RW16(0): [Word8, Word8])
    RW32(0): Word32  = WordU8_lt (RW8(0): Word8, RW8(2): Word8)
    switch {test = RW32(0): Word32,
	    default = None,
	    cases = ((0x0, L_168), (0x1, L_167))}
L_149: {kind = Jump,
	live = (RW64(0): Word64, SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RW8(0): Word8  = WordU64_extdToWord8 (RW64(0): Word64)
    RP(0): Objptr (opt_12)
     = glob {index = 5, isRoot = true, ty = Objptr (opt_12)}
    RW16(0): [Word8, Word8]  = Cast (0x3930, [Word8, Word8])
    Goto L_18
L_151: {kind = Jump,
	live = (RW64(0): Word64, SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
    RW64(0): Word64  = RW64(1): Word64
    Goto loop_38
L_154: {kind = Jump,
	live = (RW64(0): Word64, RP(0): Objptr (opt_8), SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    XW8 (RP(0): Objptr (opt_8), RW64(0): Word64, 1, 0): Word8  = 0x0
    RW64(1): Word64  = Word64_add (0x1, RW64(0): Word64)
    RW64(0): Word64  = RW64(1): Word64
    Goto loop_39
L_157: {kind = Jump,
	live = (RW64(0): Word64, RP(0): Objptr (opt_8), SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    XW8 (RP(0): Objptr (opt_8), RW64(0): Word64, 1, 0): Word8  = 0x0
    RW64(1): Word64  = Word64_add (0x1, RW64(0): Word64)
    RW64(0): Word64  = RW64(1): Word64
    Goto loop_40
L_159: {kind = Jump,
	live = (RW64(0): Word64, SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RW64(1): Word64  = Word64_add (RW64(0): Word64, 0x1)
    RW64(0): Word64  = RW64(1): Word64
    Goto loop_41
L_166: {kind = CReturn {dst = None,
			frameInfo = Some {frameLayoutsIndex = 2},
			func = {args = (GCState, Word64, Word32),
				bytesNeeded = None,
				convention = cdecl,
				ensuresBytesFree = true,
				mayGC = true,
				maySwitchThreads = false,
				modifiesFrontier = true,
				prototype = {args = (CPointer, Word64, Int32),
					     res = None},
				readsStackTop = true,
				return = Bits0,
				symbolScope = private,
				target = GC_collect,
				writesStackTop = true}},
	live = (SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    Goto L_162
L_161: {kind = Jump,
	live = (SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    CCall {args = (<GCState>, 0x0, 0x0),
	   frameInfo = Some {frameLayoutsIndex = 2},
	   func = {args = (GCState, Word64, Word32),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int32), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = GC_collect,
		   writesStackTop = true},
	   return = Some L_166}
L_165: {kind = CReturn {dst = None,
			frameInfo = Some {frameLayoutsIndex = 0},
			func = {args = (Objptr (opt_3)),
				bytesNeeded = None,
				convention = cdecl,
				ensuresBytesFree = false,
				mayGC = true,
				maySwitchThreads = false,
				modifiesFrontier = true,
				prototype = {args = (Objptr), res = None},
				readsStackTop = true,
				return = Bits0,
				symbolScope = private,
				target = Stdio_print,
				writesStackTop = true}},
	live = (),
	raises = None,
	returns = Some ()}
    CCall {args = (<GCState>, 0x1),
	   frameInfo = None,
	   func = {args = (GCState, Word32),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = false,
		   mayGC = false,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Int32), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = MLton_halt,
		   writesStackTop = true},
	   return = None}
L_163: {kind = Jump, live = (), raises = None, returns = Some ()}
    CCall {args = (glob {index = 12, isRoot = true, ty = Objptr (opt_3)}),
	   frameInfo = Some {frameLayoutsIndex = 0},
	   func = {args = (Objptr (opt_3)),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = false,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (Objptr), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = Stdio_print,
		   writesStackTop = true},
	   return = Some L_165}
L_164: {kind = Jump,
	live = (RP(6): Objptr (opt_10)),
	raises = None,
	returns = Some ()}
    OW32 (RP(6): Objptr (opt_10), 0): Word32  = 0x1
    CCall {args = (<GCState>, 0x0),
	   frameInfo = None,
	   func = {args = (GCState, Word32),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = false,
		   mayGC = false,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Int32), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = MLton_halt,
		   writesStackTop = true},
	   return = None}
L_162: {kind = Jump,
	live = (SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RP(0): Objptr (opt_11)  = OP (SP(0): Objptr (opt_9), 0): Objptr (opt_11)
    CW64 (<Frontier>)  = 0x17
    RQ(7): CPointer  = CPointer_add (<Frontier>, 0x8)
    RP(1): Objptr (opt_11)  = Cast (RQ(7): CPointer, Objptr (opt_11))
    <Frontier>  = CPointer_add (<Frontier>, 0x18)
    RW32(0): Bits32  = WordU8_extdToWord32 (Cast (0x1, [Word2, Bits6]))
    OW32 (RP(1): Objptr (opt_11), 0): [Word2, Bits30]
     = Cast (RW32(0): Bits32, [Word2, Bits30])
    OW32 (RP(1): Objptr (opt_11), 4): Bits32  = Cast (0x0, Bits32)
    OP (RP(1): Objptr (opt_11), 8): Objptr (opt_11)  = RP(0): Objptr (opt_11)
    RW64(0): Word64
     = WordU64_rshift (Cast (SP(0): Objptr (opt_9), Bits64), 0x8)
    XW8 (OQ (<GCState>, 968): CPointer, RW64(0): Word64, 1, 0): Word8  = 0x1
    OP (SP(0): Objptr (opt_9), 0): Objptr (opt_11)  = RP(1): Objptr (opt_11)
    RP(2): Objptr (opt_11)  = OP (SP(0): Objptr (opt_9), 0): Objptr (opt_11)
    CW64 (<Frontier>)  = 0x17
    RQ(6): CPointer  = CPointer_add (<Frontier>, 0x8)
    RP(3): Objptr (opt_11)  = Cast (RQ(6): CPointer, Objptr (opt_11))
    <Frontier>  = CPointer_add (<Frontier>, 0x18)
    RW32(1): Bits32  = WordU8_extdToWord32 (Cast (0x2, [Word2, Bits6]))
    OW32 (RP(3): Objptr (opt_11), 0): [Word2, Bits30]
     = Cast (RW32(1): Bits32, [Word2, Bits30])
    OW32 (RP(3): Objptr (opt_11), 4): Bits32  = Cast (0x0, Bits32)
    OP (RP(3): Objptr (opt_11), 8): Objptr (opt_11)  = RP(2): Objptr (opt_11)
    RW64(1): Word64
     = WordU64_rshift (Cast (SP(0): Objptr (opt_9), Bits64), 0x8)
    XW8 (OQ (<GCState>, 968): CPointer, RW64(1): Word64, 1, 0): Word8  = 0x1
    OP (SP(0): Objptr (opt_9), 0): Objptr (opt_11)  = RP(3): Objptr (opt_11)
    RP(4): Objptr (opt_11)  = OP (SP(0): Objptr (opt_9), 0): Objptr (opt_11)
    CW64 (<Frontier>)  = 0x17
    RQ(5): CPointer  = CPointer_add (<Frontier>, 0x8)
    RP(5): Objptr (opt_11)  = Cast (RQ(5): CPointer, Objptr (opt_11))
    <Frontier>  = CPointer_add (<Frontier>, 0x18)
    RW32(2): Bits32  = WordU8_extdToWord32 (Cast (0x0, [Word2, Bits6]))
    OW32 (RP(5): Objptr (opt_11), 0): [Word2, Bits30]
     = Cast (RW32(2): Bits32, [Word2, Bits30])
    OW32 (RP(5): Objptr (opt_11), 4): Bits32  = Cast (0x0, Bits32)
    OP (RP(5): Objptr (opt_11), 8): Objptr (opt_11)  = RP(4): Objptr (opt_11)
    RW64(2): Word64
     = WordU64_rshift (Cast (SP(0): Objptr (opt_9), Bits64), 0x8)
    XW8 (OQ (<GCState>, 968): CPointer, RW64(2): Word64, 1, 0): Word8  = 0x1
    OP (SP(0): Objptr (opt_9), 0): Objptr (opt_11)  = RP(5): Objptr (opt_11)
    CW64 (<Frontier>)  = 0x15
    RQ(4): CPointer  = CPointer_add (<Frontier>, 0x8)
    RP(6): Objptr (opt_10)  = Cast (RQ(4): CPointer, Objptr (opt_10))
    <Frontier>  = CPointer_add (<Frontier>, 0x10)
    OW32 (RP(6): Objptr (opt_10), 0): Word32  = 0x0
    OW32 (RP(6): Objptr (opt_10), 4): Bits32  = Cast (0x0, Bits32)
    RW32(3): Word32  = OW32 (RP(6): Objptr (opt_10), 0): Word32
    switch {test = RW32(3): Word32,
	    default = None,
	    cases = ((0x0, L_164), (0x1, L_163))}
L_160: {kind = Jump,
	live = (SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
    switch {test = RW32(0): Word32,
	    default = None,
	    cases = ((0x0, L_162), (0x1, L_161))}
loop_41: {kind = Jump,
	  live = (RW64(0): Word64, SP(0): Objptr (opt_9)),
	  raises = None,
	  returns = Some ()}
    RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x1)
    switch {test = RW32(0): Word32,
	    default = None,
	    cases = ((0x0, L_160), (0x1, L_159))}
L_158: {kind = Jump,
	live = (SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RW64(0): Word64  = 0x0
    Goto loop_41
loop_40: {kind = Jump,
	  live = (RW64(0): Word64, RP(0): Objptr (opt_8), SP(0): Objptr (opt_9)),
	  raises = None,
	  returns = Some ()}
    RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x41)
    switch {test = RW32(0): Word32,
	    default = None,
	    cases = ((0x0, L_158), (0x1, L_157))}
L_156: {kind = CReturn {dst = Some RP(0): Objptr (opt_8),
			frameInfo = Some {frameLayoutsIndex = 2},
			func = {args = (GCState, Word64, Word64, Word64),
				bytesNeeded = None,
				convention = cdecl,
				ensuresBytesFree = true,
				mayGC = true,
				maySwitchThreads = false,
				modifiesFrontier = true,
				prototype = {args = (CPointer,
						     Word64,
						     Int64,
						     Word64),
					     res = Some Objptr},
				readsStackTop = true,
				return = Objptr (opt_8),
				symbolScope = private,
				target = GC_arrayAllocate,
				writesStackTop = true}},
	live = (SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RW64(0): Word64  = 0x0
    Goto loop_40
L_155: {kind = Jump,
	live = (SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    CCall {args = (<GCState>, 0x0, 0x41, 0x11),
	   frameInfo = Some {frameLayoutsIndex = 2},
	   func = {args = (GCState, Word64, Word64, Word64),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int64, Word64),
				res = Some Objptr},
		   readsStackTop = true,
		   return = Objptr (opt_8),
		   symbolScope = private,
		   target = GC_arrayAllocate,
		   writesStackTop = true},
	   return = Some L_156}
loop_39: {kind = Jump,
	  live = (RW64(0): Word64, RP(0): Objptr (opt_8), SP(0): Objptr (opt_9)),
	  raises = None,
	  returns = Some ()}
    RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x21)
    switch {test = RW32(0): Word32,
	    default = None,
	    cases = ((0x0, L_155), (0x1, L_154))}
L_153: {kind = CReturn {dst = Some RP(0): Objptr (opt_8),
			frameInfo = Some {frameLayoutsIndex = 2},
			func = {args = (GCState, Word64, Word64, Word64),
				bytesNeeded = None,
				convention = cdecl,
				ensuresBytesFree = true,
				mayGC = true,
				maySwitchThreads = false,
				modifiesFrontier = true,
				prototype = {args = (CPointer,
						     Word64,
						     Int64,
						     Word64),
					     res = Some Objptr},
				readsStackTop = true,
				return = Objptr (opt_8),
				symbolScope = private,
				target = GC_arrayAllocate,
				writesStackTop = true}},
	live = (SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RW64(0): Word64  = 0x0
    Goto loop_39
L_152: {kind = Jump,
	live = (SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    CCall {args = (<GCState>, 0x0, 0x21, 0x11),
	   frameInfo = Some {frameLayoutsIndex = 2},
	   func = {args = (GCState, Word64, Word64, Word64),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int64, Word64),
				res = Some Objptr},
		   readsStackTop = true,
		   return = Objptr (opt_8),
		   symbolScope = private,
		   target = GC_arrayAllocate,
		   writesStackTop = true},
	   return = Some L_153}
loop_38: {kind = Jump,
	  live = (RW64(0): Word64, SP(0): Objptr (opt_9)),
	  raises = None,
	  returns = Some ()}
    RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x100)
    switch {test = RW32(0): Word32,
	    default = None,
	    cases = ((0x0, L_152), (0x1, L_151))}
L_150: {kind = Jump,
	live = (SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RW64(0): Word64  = 0x0
    Goto loop_38
loop_37: {kind = Jump,
	  live = (RW64(0): Word64, SP(0): Objptr (opt_9)),
	  raises = None,
	  returns = Some ()}
    RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x100)
    switch {test = RW32(0): Word32,
	    default = None,
	    cases = ((0x0, L_150), (0x1, L_149))}
L_148: {kind = Jump,
	live = (SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RW64(0): Word64  = 0x0
    Goto loop_37
loop_36: {kind = Jump,
	  live = (RW64(0): Word64, SP(0): Objptr (opt_9)),
	  raises = None,
	  returns = Some ()}
    RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x100)
    switch {test = RW32(0): Word32,
	    default = None,
	    cases = ((0x0, L_148), (0x1, L_147))}
L_146: {kind = Jump,
	live = (SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RW64(0): Word64  = 0x0
    Goto loop_36
loop_35: {kind = Jump,
	  live = (RW64(0): Word64, SP(0): Objptr (opt_9)),
	  raises = None,
	  returns = Some ()}
    RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x100)
    switch {test = RW32(0): Word32,
	    default = None,
	    cases = ((0x0, L_146), (0x1, L_145))}
L_144: {kind = Jump,
	live = (SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RW64(0): Word64  = 0x0
    Goto loop_35
loop_34: {kind = Jump,
	  live = (RW64(0): Word64, SP(0): Objptr (opt_9)),
	  raises = None,
	  returns = Some ()}
    RW32(0): Word32  = WordS64_lt (RW64(0): Word64, 0x100)
    switch {test = RW32(0): Word32,
	    default = None,
	    cases = ((0x0, L_144), (0x1, L_143))}
L_9: {kind = Jump,
      live = (SP(0): Objptr (opt_9)),
      raises = None,
      returns = Some ()}
    RW64(0): Word64  = 0x0
    Goto loop_34
L_142: {kind = Jump,
	live = (SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    Goto L_9
L_141: {kind = Jump,
	live = (RP(0): Objptr (opt_15), SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RP(1): Objptr (opt_15)  = OP (RP(0): Objptr (opt_15), 0): Objptr (opt_15)
    RP(0): Objptr (opt_15)  = RP(1): Objptr (opt_15)
    Goto loop_33
loop_33: {kind = Jump,
	  live = (RP(0): Objptr (opt_15), SP(0): Objptr (opt_9)),
	  raises = None,
	  returns = Some ()}
    switch {test = Cast (RP(0): Objptr (opt_15), Bits64),
	    default = Some L_141,
	    cases = ((0x1, L_142))}
L_139: {kind = Jump,
	live = (SP(8): Objptr (opt_15), SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RP(0): Objptr (opt_15)  = OP (SP(8): Objptr (opt_15), 0): Objptr (opt_15)
    Goto loop_33
L_136: {kind = Jump,
	live = (SP(8): Objptr (opt_15), SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    switch {test = Cast (SP(8): Objptr (opt_15), Bits64),
	    default = Some L_139,
	    cases = ((0x1, L_140))}
L_138: {kind = Jump,
	live = (RW64(0): Word64, SP(8): Objptr (opt_15), SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    CW64 (<Frontier>)  = 0x1F
    RQ(3): CPointer  = CPointer_add (<Frontier>, 0x8)
    RP(0): Objptr (opt_15)  = Cast (RQ(3): CPointer, Objptr (opt_15))
    <Frontier>  = CPointer_add (<Frontier>, 0x10)
    OP (RP(0): Objptr (opt_15), 0): Objptr (opt_15)  = SP(8): Objptr (opt_15)
    SP(8): Objptr (opt_15)  = RP(0): Objptr (opt_15)
    SW64(16): Word64  = RW64(0): Word64
    SW64(24): Word64  = 0x0
    Goto loop_32
L_137: {kind = Jump,
	live = (SW64(16): Word64, SP(8): Objptr (opt_15), SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    Arith {prim = WordS64_addCheck,
	   args = (SW64(16): Word64, 0x1),
	   dst = RW64(0): Word64,
	   overflow = L_44,
	   success = L_138}
L_135: {kind = Jump,
	live = (SW64(24): Word64,
		SW64(16): Word64,
		SP(8): Objptr (opt_15),
		SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RW32(0): Word32  = Word64_equal (0x0, SW64(24): Word64)
    switch {test = RW32(0): Word32,
	    default = None,
	    cases = ((0x0, L_137), (0x1, L_136))}
loop_32: {kind = Jump,
	  live = (SW64(24): Word64,
		  SW64(16): Word64,
		  SP(8): Objptr (opt_15),
		  SP(0): Objptr (opt_9)),
	  raises = None,
	  returns = Some ()}
    RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
    switch {test = RW32(0): Word32,
	    default = None,
	    cases = ((0x0, L_135), (0x1, L_134))}
L_6: {kind = Jump,
      live = (SP(0): Objptr (opt_9)),
      raises = None,
      returns = Some ()}
    SP(8): Objptr (opt_15)
     = glob {index = 0, isRoot = true, ty = Objptr (opt_15)}
    SW64(16): Word64  = 0x1
    SW64(24): Word64  = 0x7FFFFFFFFFFFFFFF
    Goto loop_32
L_133: {kind = Jump,
	live = (SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    Goto L_6
L_132: {kind = Jump,
	live = (RP(0): Objptr (opt_15), SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RP(1): Objptr (opt_15)  = OP (RP(0): Objptr (opt_15), 0): Objptr (opt_15)
    RP(0): Objptr (opt_15)  = RP(1): Objptr (opt_15)
    Goto loop_31
loop_31: {kind = Jump,
	  live = (RP(0): Objptr (opt_15), SP(0): Objptr (opt_9)),
	  raises = None,
	  returns = Some ()}
    switch {test = Cast (RP(0): Objptr (opt_15), Bits64),
	    default = Some L_132,
	    cases = ((0x1, L_133))}
L_130: {kind = Jump,
	live = (SP(8): Objptr (opt_15), SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RP(0): Objptr (opt_15)  = OP (SP(8): Objptr (opt_15), 0): Objptr (opt_15)
    Goto loop_31
L_127: {kind = Jump,
	live = (SP(8): Objptr (opt_15), SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    switch {test = Cast (SP(8): Objptr (opt_15), Bits64),
	    default = Some L_130,
	    cases = ((0x1, L_131))}
L_129: {kind = Jump,
	live = (RW64(0): Word64, SP(8): Objptr (opt_15), SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    CW64 (<Frontier>)  = 0x1F
    RQ(2): CPointer  = CPointer_add (<Frontier>, 0x8)
    RP(0): Objptr (opt_15)  = Cast (RQ(2): CPointer, Objptr (opt_15))
    <Frontier>  = CPointer_add (<Frontier>, 0x10)
    OP (RP(0): Objptr (opt_15), 0): Objptr (opt_15)  = SP(8): Objptr (opt_15)
    SP(8): Objptr (opt_15)  = RP(0): Objptr (opt_15)
    SW64(16): Word64  = RW64(0): Word64
    SW64(24): Word64  = 0x0
    Goto loop_30
L_128: {kind = Jump,
	live = (SW64(16): Word64, SP(8): Objptr (opt_15), SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    Arith {prim = WordS64_addCheck,
	   args = (SW64(16): Word64, 0x1),
	   dst = RW64(0): Word64,
	   overflow = L_44,
	   success = L_129}
L_126: {kind = Jump,
	live = (SW64(24): Word64,
		SW64(16): Word64,
		SP(8): Objptr (opt_15),
		SP(0): Objptr (opt_9)),
	raises = None,
	returns = Some ()}
    RW32(0): Word32  = Word64_equal (0x0, SW64(24): Word64)
    switch {test = RW32(0): Word32,
	    default = None,
	    cases = ((0x0, L_128), (0x1, L_127))}
loop_30: {kind = Jump,
	  live = (SW64(24): Word64,
		  SW64(16): Word64,
		  SP(8): Objptr (opt_15),
		  SP(0): Objptr (opt_9)),
	  raises = None,
	  returns = Some ()}
    RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
    switch {test = RW32(0): Word32,
	    default = None,
	    cases = ((0x0, L_126), (0x1, L_125))}
L_3: {kind = Jump, live = (), raises = None, returns = Some ()}
    CW64 (<Frontier>)  = 0x13
    RQ(1): CPointer  = CPointer_add (<Frontier>, 0x8)
    SP(0): Objptr (opt_9)  = Cast (RQ(1): CPointer, Objptr (opt_9))
    <Frontier>  = CPointer_add (<Frontier>, 0x10)
    OP (SP(0): Objptr (opt_9), 0): Objptr (opt_11)
     = Cast (0x1, Objptr (opt_11))
    SP(8): Objptr (opt_15)
     = glob {index = 0, isRoot = true, ty = Objptr (opt_15)}
    SW64(16): Word64  = 0x1
    SW64(24): Word64  = 0x7FFFFFFFFFFFFFFF
    Goto loop_30
L_124: {kind = Jump, live = (), raises = None, returns = Some ()}
    Goto L_3
L_122: {kind = Jump, live = (), raises = None, returns = Some ()}
    RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
    switch {test = RW32(0): Word32,
	    default = None,
	    cases = ((0x0, L_124), (0x1, L_123))}
L_121: {kind = Jump,
	live = (RP(0): Objptr (opt_15)),
	raises = None,
	returns = Some ()}
    RP(1): Objptr (opt_15)  = OP (RP(0): Objptr (opt_15), 0): Objptr (opt_15)
    RP(0): Objptr (opt_15)  = RP(1): Objptr (opt_15)
    Goto loop_29
loop_29: {kind = Jump,
	  live = (RP(0): Objptr (opt_15)),
	  raises = None,
	  returns = Some ()}
    switch {test = Cast (RP(0): Objptr (opt_15), Bits64),
	    default = Some L_121,
	    cases = ((0x1, L_122))}
L_119: {kind = Jump,
	live = (SP(0): Objptr (opt_15)),
	raises = None,
	returns = Some ()}
    RP(0): Objptr (opt_15)  = OP (SP(0): Objptr (opt_15), 0): Objptr (opt_15)
    Goto loop_29
L_112: {kind = Jump,
	live = (SP(0): Objptr (opt_15)),
	raises = None,
	returns = Some ()}
    switch {test = Cast (SP(0): Objptr (opt_15), Bits64),
	    default = Some L_119,
	    cases = ((0x1, L_120))}
L_114: {kind = Jump,
	live = (RW64(0): Word64, SP(0): Objptr (opt_15)),
	raises = None,
	returns = Some ()}
    CW64 (<Frontier>)  = 0x1F
    RQ(0): CPointer  = CPointer_add (<Frontier>, 0x8)
    RP(0): Objptr (opt_15)  = Cast (RQ(0): CPointer, Objptr (opt_15))
    <Frontier>  = CPointer_add (<Frontier>, 0x10)
    OP (RP(0): Objptr (opt_15), 0): Objptr (opt_15)  = SP(0): Objptr (opt_15)
    SP(0): Objptr (opt_15)  = RP(0): Objptr (opt_15)
    SW64(8): Word64  = RW64(0): Word64
    SW64(16): Word64  = 0x0
    Goto loop_28
L_118: {kind = CReturn {dst = None,
			frameInfo = Some {frameLayoutsIndex = 0},
			func = {args = (Objptr (opt_3)),
				bytesNeeded = None,
				convention = cdecl,
				ensuresBytesFree = false,
				mayGC = true,
				maySwitchThreads = false,
				modifiesFrontier = true,
				prototype = {args = (Objptr), res = None},
				readsStackTop = true,
				return = Bits0,
				symbolScope = private,
				target = MLton_bug,
				writesStackTop = true}},
	live = (),
	raises = None,
	returns = Some ()}
    Return 
L_117: {kind = CReturn {dst = None,
			frameInfo = Some {frameLayoutsIndex = 0},
			func = {args = (Objptr (opt_3)),
				bytesNeeded = None,
				convention = cdecl,
				ensuresBytesFree = false,
				mayGC = true,
				maySwitchThreads = false,
				modifiesFrontier = true,
				prototype = {args = (Objptr), res = None},
				readsStackTop = true,
				return = Bits0,
				symbolScope = private,
				target = Stdio_print,
				writesStackTop = true}},
	live = (),
	raises = None,
	returns = Some ()}
    CCall {args = (glob {index = 11, isRoot = true, ty = Objptr (opt_3)}),
	   frameInfo = Some {frameLayoutsIndex = 0},
	   func = {args = (Objptr (opt_3)),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = false,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (Objptr), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = MLton_bug,
		   writesStackTop = true},
	   return = Some L_118}
L_116: {kind = CReturn {dst = None,
			frameInfo = Some {frameLayoutsIndex = 0},
			func = {args = (Objptr (opt_3)),
				bytesNeeded = None,
				convention = cdecl,
				ensuresBytesFree = false,
				mayGC = true,
				maySwitchThreads = false,
				modifiesFrontier = true,
				prototype = {args = (Objptr), res = None},
				readsStackTop = true,
				return = Bits0,
				symbolScope = private,
				target = Stdio_print,
				writesStackTop = true}},
	live = (),
	raises = None,
	returns = Some ()}
    CCall {args = (glob {index = 7, isRoot = true, ty = Objptr (opt_3)}),
	   frameInfo = Some {frameLayoutsIndex = 0},
	   func = {args = (Objptr (opt_3)),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = false,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (Objptr), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = Stdio_print,
		   writesStackTop = true},
	   return = Some L_117}
L_115: {kind = CReturn {dst = None,
			frameInfo = Some {frameLayoutsIndex = 0},
			func = {args = (Objptr (opt_3)),
				bytesNeeded = None,
				convention = cdecl,
				ensuresBytesFree = false,
				mayGC = true,
				maySwitchThreads = false,
				modifiesFrontier = true,
				prototype = {args = (Objptr), res = None},
				readsStackTop = true,
				return = Bits0,
				symbolScope = private,
				target = Stdio_print,
				writesStackTop = true}},
	live = (),
	raises = None,
	returns = Some ()}
    CCall {args = (glob {index = 10, isRoot = true, ty = Objptr (opt_3)}),
	   frameInfo = Some {frameLayoutsIndex = 0},
	   func = {args = (Objptr (opt_3)),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = false,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (Objptr), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = Stdio_print,
		   writesStackTop = true},
	   return = Some L_116}
L_44: {kind = Jump, live = (), raises = None, returns = Some ()}
    CCall {args = (glob {index = 9, isRoot = true, ty = Objptr (opt_3)}),
	   frameInfo = Some {frameLayoutsIndex = 0},
	   func = {args = (Objptr (opt_3)),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = false,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (Objptr), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = Stdio_print,
		   writesStackTop = true},
	   return = Some L_115}
L_113: {kind = Jump,
	live = (SW64(8): Word64, SP(0): Objptr (opt_15)),
	raises = None,
	returns = Some ()}
    Arith {prim = WordS64_addCheck,
	   args = (SW64(8): Word64, 0x1),
	   dst = RW64(0): Word64,
	   overflow = L_44,
	   success = L_114}
L_111: {kind = Jump,
	live = (SW64(16): Word64, SW64(8): Word64, SP(0): Objptr (opt_15)),
	raises = None,
	returns = Some ()}
    RW32(0): Word32  = Word64_equal (0x0, SW64(16): Word64)
    switch {test = RW32(0): Word32,
	    default = None,
	    cases = ((0x0, L_113), (0x1, L_112))}
loop_28: {kind = Jump,
	  live = (SW64(16): Word64, SW64(8): Word64, SP(0): Objptr (opt_15)),
	  raises = None,
	  returns = Some ()}
    RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 8): CPointer, <Frontier>)
    switch {test = RW32(0): Word32,
	    default = None,
	    cases = ((0x0, L_111), (0x1, L_110))}
L_109: {kind = Jump, live = (), raises = None, returns = Some ()}
    SP(0): Objptr (opt_15)
     = glob {index = 0, isRoot = true, ty = Objptr (opt_15)}
    SW64(8): Word64  = 0x1
    SW64(16): Word64  = 0x4000000000000000
    Goto loop_28
L_0: {kind = Jump, live = (), raises = None, returns = Some ()}
    RW32(0): Word32  = CPointer_lt (OQ (<GCState>, 24): CPointer, <StackTop>)
    switch {test = RW32(0): Word32,
	    default = None,
	    cases = ((0x0, L_109), (0x1, L_108))}
main_0: {kind = Func, live = (), raises = None, returns = Some ()}
    Goto L_0
