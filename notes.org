* google hangout <2013-06-11 Tue>
  -bracket intresting stuff with ffi calls to find them in intermediate files
  -functon order can get reversed in different passes
  -names are not mangled too much in intermediate code
  -implement 2 vector types words and reals with a parameter of number elements and a parametr of element size
  -look at codegen prim predicate, that checks if an opperation is
  supported
* google hangout <2013-06-14 Fri>
-asserts in mlton/lib/basic, use for testing
-functor calls get expanded, so try to share code explictly
-handle generic code
-datatype of vectorop
* google hangout <2013-06-18 Tue>
  -alignment question
  -Vector primitive needs to be written
  -I need to do this myself (woo?)
    -Atoms.prims is first place to look
    -then look at places its used
    -then goto basis lib primitives and instantiate it there
    -Array0Const is a good place to look for an 
  -MLton has an unsafe array to vector conversion
  -Compairsons both bool and actual int/float values

  -Functors for type paramiterization is a good idea, just be sure to
  share the code that does the backend work
* google hangout <2013-06-21 Fri>
  -Might be some predefined objects aligned to 8 byte boundries
  -Also look at the runtime stuff, thats probably the issue
  -basis lib unsafe.mlb to create uninitalized array
  -compare c calls to c calls, i.e. c-simd call vs c-for loop

* google hangout <2013-07-03 Wed>
  -want something like word128 ! ! !
  -this is important for performance.
  -tuples are tricky.
  -pack word should work ok.
  -enumerate the specific subset of instructions for frontend.
  -start working from backend and moving up for implementing hardware stuff.
  -work with the simple ir's, basically ssa, working with primitive not object.
  -start with ssa and work down and up from there.
  -look at word based things in ssa.
* google hangout <2013-07-10 Wed>
  QUESTIONS: adding Ymm register stuff to amd64 codegen
  -alias the ymm registers to the xmm registers
  -keep just xmm register structure and work on that
* Low level details
** Immediate opperands
*** Compairson
#+BEGIN_SRC C
/* Compare predicates for scalar and packed compare intrinsics. In AVX */

/* Equal (ordered, non-signaling)  */
#define _CMP_EQ_OQ	0x00
/* Less-than (ordered, signaling)  */
#define _CMP_LT_OS	0x01
/* Less-than-or-equal (ordered, signaling)  */
#define _CMP_LE_OS	0x02
/* Unordered (non-signaling)  */
#define _CMP_UNORD_Q	0x03
/* Not-equal (unordered, non-signaling)  */
#define _CMP_NEQ_UQ	0x04
/* Not-less-than (unordered, signaling)  */
#define _CMP_NLT_US	0x05
/* Not-less-than-or-equal (unordered, signaling)  */
#define _CMP_NLE_US	0x06
/* Ordered (nonsignaling)   */
#define _CMP_ORD_Q	0x07
/* Equal (unordered, non-signaling)  */
#define _CMP_EQ_UQ	0x08
/* Not-greater-than-or-equal (unordered, signaling)  */
#define _CMP_NGE_US	0x09
/* Not-greater-than (unordered, signaling)  */
#define _CMP_NGT_US	0x0a
/* False (ordered, non-signaling)  */
#define _CMP_FALSE_OQ	0x0b
/* Not-equal (ordered, non-signaling)  */
#define _CMP_NEQ_OQ	0x0c
/* Greater-than-or-equal (ordered, signaling)  */
#define _CMP_GE_OS	0x0d
/* Greater-than (ordered, signaling)  */
#define _CMP_GT_OS	0x0e
/* True (unordered, non-signaling)  */
#define _CMP_TRUE_UQ	0x0f
/* Equal (ordered, signaling)  */
#define _CMP_EQ_OS	0x10
/* Less-than (ordered, non-signaling)  */
#define _CMP_LT_OQ	0x11
/* Less-than-or-equal (ordered, non-signaling)  */
#define _CMP_LE_OQ	0x12
/* Unordered (signaling)  */
#define _CMP_UNORD_S	0x13
/* Not-equal (unordered, signaling)  */
#define _CMP_NEQ_US	0x14
/* Not-less-than (unordered, non-signaling)  */
#define _CMP_NLT_UQ	0x15
/* Not-less-than-or-equal (unordered, non-signaling)  */
#define _CMP_NLE_UQ	0x16
/* Ordered (signaling)  */
#define _CMP_ORD_S	0x17
/* Equal (unordered, signaling)  */
#define _CMP_EQ_US	0x18
/* Not-greater-than-or-equal (unordered, non-signaling)  */
#define _CMP_NGE_UQ	0x19
/* Not-greater-than (unordered, non-signaling)  */
#define _CMP_NGT_UQ	0x1a
/* False (ordered, signaling)  */
#define _CMP_FALSE_OS	0x1b
/* Not-equal (ordered, signaling)  */
#define _CMP_NEQ_OS	0x1c
/* Greater-than-or-equal (ordered, non-signaling)  */
#define _CMP_GE_OQ	0x1d
/* Greater-than (ordered, non-signaling)  */
#define _CMP_GT_OQ	0x1e
/* True (unordered, signaling)  */
#define _CMP_TRUE_US	0x1f
#+END_SRC
*** Compairson table
| Predicate       | imm8          | Description               | Result:                   | A               | Is             | 1st   | Operand, | B     | Is    | 2nd | Operand | Signals | #IA |
| Value           | 1             | on                        | QNAN                      |                 |                |       |          |       |       |     |         |         |     |
| A               | >B            | A<B                       | A=B                       | Unordered       |                |       |          |       |       |     |         |         |     |
| EQ_OQ           | (EQ)          | 0H                        | Equal                     | (ordered,       | non-signaling) | False | False    | True  | False | No  |         |         |     |
| LT_OS           | (LT)          | 1H                        | Less-than                 | (ordered,       | signaling)     | False | True     | False | False | Yes |         |         |     |
| LE_OS           | (LE)          | 2H                        | Less-than-or-equal        | (ordered,       | False          | True  | True     | False | Yes   |     |         |         |     |
| signaling)      |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| UNORD_Q         | 3H            | Unordered                 | (non-signaling)           | False           | False          | False | True     | No    |       |     |         |         |     |
| (UNORD)         |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| NEQ_UQ          | (NEQ)         | 4H                        | Not-equal                 | (unordered,     | non-           | True  | True     | False | True  | No  |         |         |     |
| signaling)      |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| NLT_US          | (NLT)         | 5H                        | Not-less-than             | (unordered,     | signaling)     | True  | False    | True  | True  | Yes |         |         |     |
| NLE_US          | (NLE)         | 6H                        | Not-less-than-or-equal    | (unordered,     | True           | False | False    | True  | Yes   |     |         |         |     |
| signaling)      |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| ORD_Q           | (ORD)         | 7H                        | Ordered                   | (non-signaling) | True           | True  | True     | False | No    |     |         |         |     |
| EQ_UQ           | 8H            | Equal                     | (unordered,               | non-signaling)  | False          | False | True     | True  | No    |     |         |         |     |
| NGE_US          | (NGE)         | 9H                        | Not-greater-than-or-equal | False           | True           | False | True     | Yes   |       |     |         |         |     |
| (unordered,     | signaling)    |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| NGT_US          | (NGT)         | AH                        | Not-greater-than          | (unordered,     | sig-           | False | True     | True  | True  | Yes |         |         |     |
| naling)         |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| FALSE_OQ(FALSE) | BH            | False                     | (ordered,                 | non-signaling)  | False          | False | False    | False | No    |     |         |         |     |
| NEQ_OQ          | CH            | Not-equal                 | (ordered,                 | non-signaling)  | True           | True  | False    | False | No    |     |         |         |     |
| GE_OS           | (GE)          | DH                        | Greater-than-or-equal     | (ordered,       | sig-           | True  | False    | True  | False | Yes |         |         |     |
| naling)         |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| GT_OS           | (GT)          | EH                        | Greater-than              | (ordered,       | signaling)     | True  | False    | False | False | Yes |         |         |     |
| TRUE_UQ(TRUE)   | FH            | True                      | (unordered,               | non-signaling)  | True           | True  | True     | True  | No    |     |         |         |     |
| EQ_OS           | 10H           | Equal                     | (ordered,                 | signaling)      | False          | False | True     | False | Yes   |     |         |         |     |
| LT_OQ           | 11H           | Less-than                 | (ordered,                 | nonsignaling)   | False          | True  | False    | False | No    |     |         |         |     |
| LE_OQ           | 12H           | Less-than-or-equal        | (ordered,                 | non-            | False          | True  | True     | False | No    |     |         |         |     |
| signaling)      |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| UNORD_S         | 13H           | Unordered                 | (signaling)               | False           | False          | False | True     | Yes   |       |     |         |         |     |
| NEQ_US          | 14H           | Not-equal                 | (unordered,               | signaling)      | True           | True  | False    | True  | Yes   |     |         |         |     |
| NLT_UQ          | 15H           | Not-less-than             | (unordered,               | nonsig-         | True           | False | True     | True  | No    |     |         |         |     |
| naling)         |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| NLE_UQ          | 16H           | Not-less-than-or-equal    | (unordered,               | True            | False          | False | True     | No    |       |     |         |         |     |
| nonsignaling)   |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| ORD_S           | 17H           | Ordered                   | (signaling)               | True            | True           | True  | False    | Yes   |       |     |         |         |     |
| EQ_US           | 18H           | Equal                     | (unordered,               | signaling)      | False          | False | True     | True  | Yes   |     |         |         |     |
| Predicate       | imm8          | Description               | Result:                   | A               | Is             | 1st   | Operand, | B     | Is    | 2nd | Operand | Signals | #IA |
| Value           | on            | QNAN                      |                           |                 |                |       |          |       |       |     |         |         |     |
| A               | >B            | A<B                       | A=B                       | Unordered1      |                |       |          |       |       |     |         |         |     |
| NGE_UQ          | 19H           | Not-greater-than-or-equal | (unor-                    | False           | True           | False | True     | No    |       |     |         |         |     |
| dered,          | nonsignaling) |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| NGT_UQ          | 1AH           | Not-greater-than          | (unordered,               | non-            | False          | True  | True     | True  | No    |     |         |         |     |
| signaling)      |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| FALSE_OS        | 1BH           | False                     | (ordered,                 | signaling)      | False          | False | False    | False | Yes   |     |         |         |     |
| NEQ_OS          | 1CH           | Not-equal                 | (ordered,                 | signaling)      | True           | True  | False    | False | Yes   |     |         |         |     |
| GE_OQ           | 1DH           | Greater-than-or-equal     | (ordered,                 | True            | False          | True  | False    | No    |       |     |         |         |     |
| nonsignaling)   |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| GT_OQ           | 1EH           | Greater-than              | (ordered,                 | nonsignal-      | True           | False | False    | False | No    |     |         |         |     |
| ing)            |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| TRUE_US         | 1FH           | True                      | (unordered,               | signaling)      | True           | True  | True     | True  | Yes   |     |         |         |     |
* Sml snippets
** Software vector function
#+BEGIN_SRC 
  local
    open Vector
  in
    fun vectorFun (a,b,vecOp,n) = let
      val f = fn x =>vecOp(sub(a,x),sub(b,x))
    in tabulate f n end
  end
#+END_SRC
* TODO Int/word issues
  We probably need both int and word versions of the general simd opperations
  but at the low level it seems easiest to work with words, but as of now
  I have everything as ints, fix this
* Compilation warnings
Warning: ../backend/rep-type.fun 735.10.
  Case is not exhaustive.
    missing pattern: Align32
    in: case ! Control.align of Control.A  ...  16 => Bits.inWord128
Warning: ../codegen/c-codegen/c-codegen.fun 76.13.
  Case is not exhaustive.
    missing pattern: W128 | W256
    in: case WordSize.prim (size w) of W8  ...   toString w, "llu"])
Warning: ../codegen/x86-codegen/x86.fun 104.13.
  Case is not exhaustive.
    missing pattern: Word128 | Word256
    in: case t of CPointer => (Vector.new  ...  r.new2 (LONG, LONG))
Warning: ../codegen/x86-codegen/x86.fun 480.13.
  Case is not exhaustive.
    missing pattern: Word128 | Word256
    in: case t of CPointer => Four | Int8  ...  ur | Word64 => Eight
Warning: ../codegen/x86-codegen/x86.fun 1245.19.
  Case is not exhaustive.
    missing pattern: Word128 | Word256
    in: case RepType.toCType ty of CPoint  ...   w32 | Word64 => w64
Warning: ../codegen/x86-codegen/x86-mlton-basic.fun 306.13.
  Case is not exhaustive.
    missing pattern: Word128 | Word256
    in: case t of CPointer => (Label.from  ...  | Word64 => (w "64")
Warning: ../codegen/x86-codegen/x86-mlton.fun 37.12.
  Case is not exhaustive.
    missing pattern: W128 | W256
    in: case WordSize.prim s of W8 => tru  ...   true | W64 => false
Warning: ../codegen/x86-codegen/x86-mlton.fun 686.12.
  Case is not exhaustive.
    missing pattern: W128 | W256
    in: case WordSize.prim size of W8 =>   ...   => (binal64 (i, i))
Warning: ../codegen/x86-codegen/x86-mlton.fun 695.15.
  Case is not exhaustive.
    missing pattern: W128 | W256
    in: case WordSize.prim size of W8 =>   ...  prim: compare, W64")
Warning: ../codegen/x86-codegen/x86-mlton.fun 702.12.
  Case is not exhaustive.
    missing pattern: W128 | W256
    in: case WordSize.prim size of W8 =>   ...  n.prim: shift, W64")
Warning: ../codegen/x86-codegen/x86-mlton.fun 1384.17.
  Case is not exhaustive.
    missing pattern: W128 | W256
    in: case WordSize.prim s of W8 => (bi  ...  B, Instruction.SBB))
Warning: ../codegen/x86-codegen/x86-mlton.fun 1369.17.
  Case is not exhaustive.
    missing pattern: W128 | W256
    in: case WordSize.prim s of W8 => (un  ...  on.NOT, fn _ => []))
Warning: ../codegen/x86-codegen/x86-mlton.fun 1358.17.
  Case is not exhaustive.
    missing pattern: W128 | W256
    in: case WordSize.prim s of W8 => (un  ...  , size = dstsize}]))
Warning: ../codegen/x86-codegen/x86-mlton.fun 1350.17.
  Case is not exhaustive.
    missing pattern: W128 | W256
    in: case WordSize.prim s of W8 => (pm  ...  rim: Word_mul, W64")
Warning: ../codegen/x86-codegen/x86-mlton.fun 1340.17.
  Case is not exhaustive.
    missing pattern: W128 | W256
    in: case WordSize.prim s of W8 => (bi  ...  D, Instruction.ADC))
Warning: ../codegen/x86-codegen/x86-mlton.fun 1292.20.
  Case is not exhaustive.
    missing pattern: (R32, W128 | W256) | (R64, W128 | W256)
    in: case (s, WordSize.prim s') of (R6  ...  W8) => (default' ())
Warning: ../codegen/x86-codegen/x86-mlton.fun 1870.20.
  Case is not exhaustive.
    missing pattern: W128 | W256
    in: case WordSize.prim s of W8 => (bi  ...  truction.SBB, flag))
Warning: ../codegen/x86-codegen/x86-mlton.fun 1861.16.
  Case is not exhaustive.
    missing pattern: W128 | W256
    in: case WordSize.prim s of W8 => (un  ...   | W64 => (neg64 ())
Warning: ../codegen/x86-codegen/x86-mlton.fun 1854.23.
  Case is not exhaustive.
    missing pattern: W128 | W256
    in: case WordSize.prim s of W8 => (pm  ...  Word_mulCheck, W64")
Warning: ../codegen/x86-codegen/x86-mlton.fun 1848.26.
  Case is not exhaustive.
    missing pattern: W128 | W256
    in: case WordSize.prim s of W8 => (pm  ...  Word_mulCheck, W64")
Warning: ../codegen/x86-codegen/x86-mlton.fun 1837.20.
  Case is not exhaustive.
    missing pattern: W128 | W256
    in: case WordSize.prim s of W8 => (bi  ...  truction.ADC, flag))
Warning: ../codegen/x86-codegen/x86-translate.fun 275.19.
  Case is not exhaustive.
    missing pattern: W128 | W256
    in: case WordSize.prim (WordX.size w)  ...   x86.Size.LONG)) end
Warning: ../codegen/amd64-codegen/amd64.fun 1481.19.
  Case has redundant rules.
    rules: word256 => v256
    in: case RepType.toCType ty of CPoint  ...  28 | word256 => v256
Warning: ../codegen/amd64-codegen/amd64.fun 1976.16.
  Function is not exhaustive.
    missing pattern: (SSE_BinAP _) | (SSE_UnAP _)
    in: fn NOP => (str "nop") | HLT => (s  ...  Operand.layout dst))
Warning: ../codegen/amd64-codegen/amd64.fun 2196.14.
  Function is not exhaustive.
    missing pattern: (SSE_BinAP _) | (SSE_UnAP _)
    in: fn NOP => {uses = [], defs = [],   ...  = [dst], kills = []}
Warning: ../codegen/amd64-codegen/amd64.fun 2470.14.
  Function is not exhaustive.
    missing pattern: (SSE_BinAP _) | (SSE_UnAP _)
    in: fn NOP => {srcs = NONE, dsts = NO  ...  , dsts = SOME [dst]}
Warning: ../codegen/amd64-codegen/amd64.fun 2615.14.
  Function is not exhaustive.
    missing pattern: (SSE_BinAP _) | (SSE_UnAP _)
    in: fn NOP => NOP | HLT => HLT | (Bin  ...   dstsize = dstsize})
Warning: ../codegen/amd64-codegen/amd64-mlton-basic.fun 245.13.
  Case is not exhaustive.
    missing pattern: Word128 | Word256
    in: case t of CPointer => (Label.from  ...  | Word64 => (w "64")
Warning: ../codegen/amd64-codegen/amd64-mlton.fun 38.12.
  Case is not exhaustive.
    missing pattern: W128 | W256
    in: case WordSize.prim s of W8 => tru  ...   true | W64 => false
Warning: ../codegen/amd64-codegen/amd64-mlton.fun 1041.17.
  Case is not exhaustive.
    missing pattern: W128 | W256
    in: case WordSize.prim s of W8 => (pm  ...   | W64 => (imul2 ())
Warning: ../codegen/amd64-codegen/amd64-mlton.fun 1387.26.
  Case is not exhaustive.
    missing pattern: W128 | W256
    in: case WordSize.prim s of W8 => (pm  ...  amd64.Instruction.O)
Warning: ../codegen/amd64-codegen/amd64-translate.fun 275.19.
  Case is not exhaustive.
    missing pattern: W128 | W256
    in: case WordSize.prim (WordX.size w)  ...  gle amd64.Size.QUAD)
Warning: ../codegen/amd64-codegen/amd64-translate.fun 433.26.
  Case is not exhaustive.
    missing pattern: VEC
    in: case amd64.Size.class srcsize of   ...  rc, size = srcsize})
Warning: ../codegen/amd64-codegen/amd64-simplify.fun 2319.39.
  Case is not exhaustive.
    missing pattern: VEC
    in: case Size.class size of Size.INT   ...  c dst, size = size})
Warning: ../codegen/amd64-codegen/amd64-simplify.fun 2398.22.
  Case is not exhaustive.
    missing pattern: VEC
    in: case Size.class size of Size.INT   ...  c dst, size = size})
Warning: ../codegen/amd64-codegen/amd64-generate-transfers.fun 594.49.
  Case is not exhaustive.
    missing pattern: VEC
    in: case Size.class dstsize of Size.I  ...   dstsize}) :: stmts)
Warning: ../codegen/amd64-codegen/amd64-allocate-registers.fun 10109.33.
  Case is not exhaustive.
    missing pattern: VEC
    in: case Size.class (MemLoc.size meml  ...  .FLT => (doitFLT ())
Warning: ../codegen/amd64-codegen/amd64-allocate-registers.fun 10151.33.
  Case is not exhaustive.
    missing pattern: VEC
    in: case Size.class (MemLoc.size meml  ...  .FLT => (doitFLT ())
