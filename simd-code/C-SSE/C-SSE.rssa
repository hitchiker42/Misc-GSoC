MLton gc73dc79-dirty (built Mon May 27 16:34:55 EDT 2013 on Tucker-Portable-Arch)
  created this file on Thu Jun 13 16:50:06 2013.
Do not edit this file.
Flag settings: 
   align: 8
   atMLtons: (C-SSE, @MLton, --)
   chunk: chunk per function
   closureConvertGlobalize: true
   closureConvertShrink: true
   codegen: amd64
   contifyIntoMain: false
   debug: false
   defaultChar: char8
   defaultWideChar: widechar32
   defaultInt: int32
   defaultReal: real64
   defaultWord: word32
   diag passes: []
   drop passes: []
   elaborate allowConstant (default): false
   elaborate allowConstant (enabled): true
   elaborate allowFFI (default): true
   elaborate allowFFI (enabled): true
   elaborate allowPrim (default): false
   elaborate allowPrim (enabled): true
   elaborate allowOverload (default): false
   elaborate allowOverload (enabled): true
   elaborate allowRebindEquals (default): false
   elaborate allowRebindEquals (enabled): true
   elaborate deadCode (default): false
   elaborate deadCode (enabled): true
   elaborate forceUsed (default): false
   elaborate forceUsed (enabled): true
   elaborate ffiStr (default): 
   elaborate ffiStr (enabled): true
   elaborate nonexhaustiveExnMatch (default): default
   elaborate nonexhaustiveExnMatch (enabled): true
   elaborate nonexhaustiveMatch (default): warn
   elaborate nonexhaustiveMatch (enabled): true
   elaborate redundantMatch (default): warn
   elaborate redundantMatch (enabled): true
   elaborate resolveScope (default): strdec
   elaborate resolveScope (enabled): true
   elaborate sequenceNonUnit (default): ignore
   elaborate sequenceNonUnit (enabled): true
   elaborate warnUnused (default): false
   elaborate warnUnused (enabled): true
   elaborate only: false
   emit main: true
   export header: None
   exn history: false
   generated output format: executable
   gc check: Limit
   indentation: 3
   inlineIntoMain: true
   inlineLeafA: {loops = true, repeat = true, size = Some 20}
   inlineLeafB: {loops = true, repeat = true, size = Some 40}
   inlineNonRec: {small = 60, product = 320}
   input file: C-SSE.rssa
   keep CoreML: false
   keep def use: true
   keep dot: true
   keep Machine: true
   keep passes: []
   keep RSSA: true
   keep SSA: true
   keep SSA2: true
   keep SXML: true
   keep XML: true
   extra_: false
   lib dir: /home/tucker/usr/lib/mlton
   lib target dir: /home/tucker/usr/lib/mlton/targets/self
   loop passes: 1
   mark cards: true
   max function size: 10000
   mlb path vars: [{var = MLTON_ROOT, path = $(LIB_MLTON_DIR)/sml}, {var = SML_LIB, path = $(LIB_MLTON_DIR)/sml}]
   native commented: 0
   native live stack: false
   native optimize: 1
   native move hoist: true
   native copy prop: true
   native copy prop cutoff: 1000
   native cutoff: 100
   native live transfer: 8
   native shuffle: true
   native ieee fp: false
   native split: Some 20000
   optimizationPasses: [<ssa2::default>, <ssa::default>, <sxml::default>, <xml::default>]
   polyvariance: Some {hofo = true, rounds = 2, small = 30, product = 300}
   prefer abs paths: false
   prof passes: []
   profile: None
   profile branch: false
   profile C: []
   profile IL: ProfileSource
   profile include/exclude: [(Seq [Star [.], Or [Seq [Seq [[$], [(], [S], [M], [L], [_], [L], [I], [B], [)]]]], Star [.]], false)]
   profile raise: false
   profile stack: false
   profile val: false
   show basis: Some C-SSE.basis
   show def-use: Some C-SSE.def_use
   show types: true
   target: self
   target arch: AMD64
   target OS: Linux
   type check: false
   verbosity: Silent
   warn unrecognized annotation: true
   warn deprecated features: true
   zone cut depth: 100

ObjectTypes:
opt_0 = Stack
opt_1 = Normal {hasIdentity = true, ty = [Word64, ExnStack, Objptr (opt_0)]}
opt_2 = Weak None
opt_3 = Array {elt = Word8, hasIdentity = false}
opt_4 = Array {elt = Word32, hasIdentity = false}
opt_5 = Array {elt = Word16, hasIdentity = false}
opt_6 = Array {elt = Word64, hasIdentity = false}
opt_7 = Normal {hasIdentity = false, ty = [Word64, Objptr (opt_3)]}
opt_8 = Array {elt = Word8, hasIdentity = true}
opt_9 = Normal {hasIdentity = true, ty = Objptr (opt_11)}
opt_10 = Normal {hasIdentity = true, ty = [Word32, Bits32]}
opt_11 = Normal {hasIdentity = false, ty = [Word2, Bits62, Objptr (opt_11)]}
opt_12 = Normal {hasIdentity = false,
		 ty = [Word8, Word8, Bits48, Objptr (opt_12)]}
opt_13 = Normal {hasIdentity = false, ty = [Objptr (opt_3), Objptr (opt_13)]}
opt_14 = Normal {hasIdentity = false, ty = [Objptr (opt_7), Objptr (opt_14)]}
opt_15 = Normal {hasIdentity = false, ty = Objptr (opt_15)}

Main:
fun F_0 (): {raises = None, returns = None} = L_99 ()
  L_99 () Jump = 
    x_11672: Word32 = CPointer_lt (StackLimit, StackTop)
    switch {test = x_11672, default = None, cases = ((0x0, L_101), (0x1, L_100))}
  L_101 () Jump = 
    x_11673: Word32 = CPointer_lt (Limit, Frontier)
    switch {test = x_11673, default = None, cases = ((0x0, L_102), (0x1, L_100))}
  L_102 () Jump = 
    x_11601: Objptr (opt_15) = Object {header = 0x1F, size = 16}
    OP (x_11601, 0): Objptr (opt_15) = Cast (0x1: Word64, Objptr (opt_15))
    CCall {args = (<GCState>, 0x48: Word64, 0x0: Word64, opt_8),
	   func = {args = (GCState, Word64, Word64, Word64),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int64, Word64),
				res = Some Objptr},
		   readsStackTop = true,
		   return = Objptr (opt_8),
		   symbolScope = private,
		   target = GC_arrayAllocate,
		   writesStackTop = true},
	   return = Some L_103}
  L_103 (global_15: Objptr (opt_8)) CReturn {func = {args = (GCState,
							     Word64,
							     Word64,
							     Word64),
						     bytesNeeded = None,
						     convention = cdecl,
						     ensuresBytesFree = true,
						     mayGC = true,
						     maySwitchThreads = false,
						     modifiesFrontier = true,
						     prototype = {args = (CPointer,
									  Word64,
									  Int64,
									  Word64),
								  res = Some Objptr},
						     readsStackTop = true,
						     return = Objptr (opt_8),
						     symbolScope = private,
						     target = GC_arrayAllocate,
						     writesStackTop = true}} = 
    CCall {args = (<GCState>, 0x48: Word64, 0x0: Word64, opt_8),
	   func = {args = (GCState, Word64, Word64, Word64),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int64, Word64),
				res = Some Objptr},
		   readsStackTop = true,
		   return = Objptr (opt_8),
		   symbolScope = private,
		   target = GC_arrayAllocate,
		   writesStackTop = true},
	   return = Some L_104}
  L_104 (global_16: Objptr (opt_8)) CReturn {func = {args = (GCState,
							     Word64,
							     Word64,
							     Word64),
						     bytesNeeded = None,
						     convention = cdecl,
						     ensuresBytesFree = true,
						     mayGC = true,
						     maySwitchThreads = false,
						     modifiesFrontier = true,
						     prototype = {args = (CPointer,
									  Word64,
									  Int64,
									  Word64),
								  res = Some Objptr},
						     readsStackTop = true,
						     return = Objptr (opt_8),
						     symbolScope = private,
						     target = GC_arrayAllocate,
						     writesStackTop = true}} = 
    CCall {args = (<GCState>, 0x48: Word64, 0x0: Word64, opt_8),
	   func = {args = (GCState, Word64, Word64, Word64),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int64, Word64),
				res = Some Objptr},
		   readsStackTop = true,
		   return = Objptr (opt_8),
		   symbolScope = private,
		   target = GC_arrayAllocate,
		   writesStackTop = true},
	   return = Some L_105}
  L_105 (global_17: Objptr (opt_8)) CReturn {func = {args = (GCState,
							     Word64,
							     Word64,
							     Word64),
						     bytesNeeded = None,
						     convention = cdecl,
						     ensuresBytesFree = true,
						     mayGC = true,
						     maySwitchThreads = false,
						     modifiesFrontier = true,
						     prototype = {args = (CPointer,
									  Word64,
									  Int64,
									  Word64),
								  res = Some Objptr},
						     readsStackTop = true,
						     return = Objptr (opt_8),
						     symbolScope = private,
						     target = GC_arrayAllocate,
						     writesStackTop = true}} = 
    x_11604: Objptr (opt_12) = Object {header = 0x19, size = 24}
    x_11675: Bits32
    = WordU16_extdToWord32 (Cast (0x4641: Word16, [Word8, Word8]))
    OW32 (x_11604, 0): [Word8, Word8, Bits16]
    = Cast (x_11675, [Word8, Word8, Bits16])
    OW32 (x_11604, 4): Bits32 = Cast (0x0: Word32, Bits32)
    OP (x_11604, 8): Objptr (opt_12) = Cast (0x1: Word64, Objptr (opt_12))
    x_11605: Objptr (opt_12) = Object {header = 0x19, size = 24}
    x_11674: Bits32
    = WordU16_extdToWord32 (Cast (0x6661: Word16, [Word8, Word8]))
    OW32 (x_11605, 0): [Word8, Word8, Bits16]
    = Cast (x_11674, [Word8, Word8, Bits16])
    OW32 (x_11605, 4): Bits32 = Cast (0x0: Word32, Bits32)
    OP (x_11605, 8): Objptr (opt_12) = x_11604
    x_11609: Objptr (opt_13) = Object {header = 0x1B, size = 24}
    OP (x_11609, 0): Objptr (opt_3) = "
": Objptr (opt_3)
    OP (x_11609, 8): Objptr (opt_13) = Cast (0x1: Word64, Objptr (opt_13))
    main_0 () NonTail {cont = L_106, handler = Dead}
  L_106 () Cont {handler = Dead} = 
    CCall {args = ("control shouldn't reach here": Objptr (opt_3)),
	   func = {args = (Objptr (opt_3)),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = false,
		   mayGC = false,
		   maySwitchThreads = false,
		   modifiesFrontier = false,
		   prototype = {args = (Objptr), res = None},
		   readsStackTop = false,
		   return = Bits0,
		   symbolScope = private,
		   target = MLton_bug,
		   writesStackTop = false},
	   return = None}
  L_100 () Jump = 
    CCall {args = (<GCState>, 0x0: Word64, 0x0: Word32),
	   func = {args = (GCState, Word64, Word32),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int32), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = GC_collect,
		   writesStackTop = true},
	   return = Some L_107}
  L_107 () CReturn {func = {args = (GCState, Word64, Word32),
			    bytesNeeded = None,
			    convention = cdecl,
			    ensuresBytesFree = true,
			    mayGC = true,
			    maySwitchThreads = false,
			    modifiesFrontier = true,
			    prototype = {args = (CPointer, Word64, Int32),
					 res = None},
			    readsStackTop = true,
			    return = Bits0,
			    symbolScope = private,
			    target = GC_collect,
			    writesStackTop = true}} = 
    L_102 ()

Functions:
fun main_0 (): {raises = None, returns = Some ()} = L_0 ()
  L_0 () Jump = 
    x_11676: Word32 = CPointer_lt (StackLimit, StackTop)
    switch {test = x_11676, default = None, cases = ((0x0, L_109), (0x1, L_108))}
  L_109 () Jump = 
    loop_28 (x_11601, 0x1: Word64, 0x4000000000000000: Word64)
  loop_28 (x_11473: Objptr (opt_15), x_11472: Word64, x_11471: Word64) Jump = 
    x_11677: Word32 = CPointer_lt (Limit, Frontier)
    switch {test = x_11677, default = None, cases = ((0x0, L_111), (0x1, L_110))}
  L_111 () Jump = 
    x_11474: Word32 = Word64_equal (x_11471, 0x0: Word64)
    switch {test = x_11474, default = None, cases = ((0x0, L_113), (0x1, L_112))}
  L_113 () Jump = 
    Arith {args = (x_11472, 0x1: Word64),
	   dst = x_11678,
	   overflow = L_44,
	   prim = WordS64_addCheck,
	   success = L_114,
	   ty = Word64}
  L_44 () Jump = 
    CCall {args = ("unhandled exception: ": Objptr (opt_3)),
	   func = {args = (Objptr (opt_3)),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = false,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (Objptr), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = Stdio_print,
		   writesStackTop = true},
	   return = Some L_115}
  L_115 () CReturn {func = {args = (Objptr (opt_3)),
			    bytesNeeded = None,
			    convention = cdecl,
			    ensuresBytesFree = false,
			    mayGC = true,
			    maySwitchThreads = false,
			    modifiesFrontier = true,
			    prototype = {args = (Objptr), res = None},
			    readsStackTop = true,
			    return = Bits0,
			    symbolScope = private,
			    target = Stdio_print,
			    writesStackTop = true}} = 
    CCall {args = ("Overflow": Objptr (opt_3)),
	   func = {args = (Objptr (opt_3)),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = false,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (Objptr), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = Stdio_print,
		   writesStackTop = true},
	   return = Some L_116}
  L_116 () CReturn {func = {args = (Objptr (opt_3)),
			    bytesNeeded = None,
			    convention = cdecl,
			    ensuresBytesFree = false,
			    mayGC = true,
			    maySwitchThreads = false,
			    modifiesFrontier = true,
			    prototype = {args = (Objptr), res = None},
			    readsStackTop = true,
			    return = Bits0,
			    symbolScope = private,
			    target = Stdio_print,
			    writesStackTop = true}} = 
    CCall {args = ("
": Objptr (opt_3)),
	   func = {args = (Objptr (opt_3)),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = false,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (Objptr), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = Stdio_print,
		   writesStackTop = true},
	   return = Some L_117}
  L_117 () CReturn {func = {args = (Objptr (opt_3)),
			    bytesNeeded = None,
			    convention = cdecl,
			    ensuresBytesFree = false,
			    mayGC = true,
			    maySwitchThreads = false,
			    modifiesFrontier = true,
			    prototype = {args = (Objptr), res = None},
			    readsStackTop = true,
			    return = Bits0,
			    symbolScope = private,
			    target = Stdio_print,
			    writesStackTop = true}} = 
    CCall {args = ("unhandled exception in Basis Library": Objptr (opt_3)),
	   func = {args = (Objptr (opt_3)),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = false,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (Objptr), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = MLton_bug,
		   writesStackTop = true},
	   return = Some L_118}
  L_118 () CReturn {func = {args = (Objptr (opt_3)),
			    bytesNeeded = None,
			    convention = cdecl,
			    ensuresBytesFree = false,
			    mayGC = true,
			    maySwitchThreads = false,
			    modifiesFrontier = true,
			    prototype = {args = (Objptr), res = None},
			    readsStackTop = true,
			    return = Bits0,
			    symbolScope = private,
			    target = MLton_bug,
			    writesStackTop = true}} = 
    return ()
  L_114 () Jump = 
    x_11649: Objptr (opt_15) = Object {header = 0x1F, size = 16}
    OP (x_11649, 0): Objptr (opt_15) = x_11473
    loop_28 (x_11649, x_11678, 0x0: Word64)
  L_112 () Jump = 
    switch {test = Cast (x_11473, Bits64),
	    default = Some L_119,
	    cases = ((0x1, L_120))}
  L_119 () Jump = 
    x_11646: Objptr (opt_15) = OP (x_11473, 0): Objptr (opt_15)
    loop_29 (x_11646)
  loop_29 (x_11540: Objptr (opt_15)) Jump = 
    switch {test = Cast (x_11540, Bits64),
	    default = Some L_121,
	    cases = ((0x1, L_122))}
  L_121 () Jump = 
    x_11648: Objptr (opt_15) = OP (x_11540, 0): Objptr (opt_15)
    loop_29 (x_11648)
  L_122 () Jump = 
    x_11679: Word32 = CPointer_lt (Limit, Frontier)
    switch {test = x_11679, default = None, cases = ((0x0, L_124), (0x1, L_123))}
  L_124 () Jump = 
    L_3 ()
  L_3 () Jump = 
    messagers_1: Objptr (opt_9) = Object {header = 0x13, size = 16}
    OP (messagers_1, 0): Objptr (opt_11) = Cast (0x1: Word64, Objptr (opt_11))
    loop_30 (x_11601, 0x1: Word64, 0x7FFFFFFFFFFFFFFF: Word64)
  loop_30 (x_11477: Objptr (opt_15), x_11476: Word64, x_11475: Word64) Jump = 
    x_11680: Word32 = CPointer_lt (Limit, Frontier)
    switch {test = x_11680, default = None, cases = ((0x0, L_126), (0x1, L_125))}
  L_126 () Jump = 
    x_11478: Word32 = Word64_equal (x_11475, 0x0: Word64)
    switch {test = x_11478, default = None, cases = ((0x0, L_128), (0x1, L_127))}
  L_128 () Jump = 
    Arith {args = (x_11476, 0x1: Word64),
	   dst = x_11681,
	   overflow = L_44,
	   prim = WordS64_addCheck,
	   success = L_129,
	   ty = Word64}
  L_129 () Jump = 
    x_11644: Objptr (opt_15) = Object {header = 0x1F, size = 16}
    OP (x_11644, 0): Objptr (opt_15) = x_11477
    loop_30 (x_11644, x_11681, 0x0: Word64)
  L_127 () Jump = 
    switch {test = Cast (x_11477, Bits64),
	    default = Some L_130,
	    cases = ((0x1, L_131))}
  L_130 () Jump = 
    x_11641: Objptr (opt_15) = OP (x_11477, 0): Objptr (opt_15)
    loop_31 (x_11641)
  loop_31 (x_11537: Objptr (opt_15)) Jump = 
    switch {test = Cast (x_11537, Bits64),
	    default = Some L_132,
	    cases = ((0x1, L_133))}
  L_132 () Jump = 
    x_11643: Objptr (opt_15) = OP (x_11537, 0): Objptr (opt_15)
    loop_31 (x_11643)
  L_133 () Jump = 
    L_6 ()
  L_6 () Jump = 
    loop_32 (x_11601, 0x1: Word64, 0x7FFFFFFFFFFFFFFF: Word64)
  loop_32 (x_11481: Objptr (opt_15), x_11480: Word64, x_11479: Word64) Jump = 
    x_11682: Word32 = CPointer_lt (Limit, Frontier)
    switch {test = x_11682, default = None, cases = ((0x0, L_135), (0x1, L_134))}
  L_135 () Jump = 
    x_11482: Word32 = Word64_equal (0x0: Word64, x_11479)
    switch {test = x_11482, default = None, cases = ((0x0, L_137), (0x1, L_136))}
  L_137 () Jump = 
    Arith {args = (x_11480, 0x1: Word64),
	   dst = x_11683,
	   overflow = L_44,
	   prim = WordS64_addCheck,
	   success = L_138,
	   ty = Word64}
  L_138 () Jump = 
    x_11639: Objptr (opt_15) = Object {header = 0x1F, size = 16}
    OP (x_11639, 0): Objptr (opt_15) = x_11481
    loop_32 (x_11639, x_11683, 0x0: Word64)
  L_136 () Jump = 
    switch {test = Cast (x_11481, Bits64),
	    default = Some L_139,
	    cases = ((0x1, L_140))}
  L_139 () Jump = 
    x_11636: Objptr (opt_15) = OP (x_11481, 0): Objptr (opt_15)
    loop_33 (x_11636)
  loop_33 (x_11533: Objptr (opt_15)) Jump = 
    switch {test = Cast (x_11533, Bits64),
	    default = Some L_141,
	    cases = ((0x1, L_142))}
  L_141 () Jump = 
    x_11638: Objptr (opt_15) = OP (x_11533, 0): Objptr (opt_15)
    loop_33 (x_11638)
  L_142 () Jump = 
    L_9 ()
  L_9 () Jump = 
    loop_34 (0x0: Word64)
  loop_34 (x_11483: Word64) Jump = 
    x_11484: Word32 = WordS64_lt (x_11483, 0x100: Word64)
    switch {test = x_11484, default = None, cases = ((0x0, L_144), (0x1, L_143))}
  L_144 () Jump = 
    loop_35 (0x0: Word64)
  loop_35 (x_11486: Word64) Jump = 
    x_11487: Word32 = WordS64_lt (x_11486, 0x100: Word64)
    switch {test = x_11487, default = None, cases = ((0x0, L_146), (0x1, L_145))}
  L_146 () Jump = 
    loop_36 (0x0: Word64)
  loop_36 (x_11489: Word64) Jump = 
    x_11490: Word32 = WordS64_lt (x_11489, 0x100: Word64)
    switch {test = x_11490, default = None, cases = ((0x0, L_148), (0x1, L_147))}
  L_148 () Jump = 
    loop_37 (0x0: Word64)
  loop_37 (x_11492: Word64) Jump = 
    x_11493: Word32 = WordS64_lt (x_11492, 0x100: Word64)
    switch {test = x_11493, default = None, cases = ((0x0, L_150), (0x1, L_149))}
  L_150 () Jump = 
    loop_38 (0x0: Word64)
  loop_38 (x_11500: Word64) Jump = 
    x_11501: Word32 = WordS64_lt (x_11500, 0x100: Word64)
    switch {test = x_11501, default = None, cases = ((0x0, L_152), (0x1, L_151))}
  L_152 () Jump = 
    CCall {args = (<GCState>, 0x0: Word64, 0x21: Word64, opt_8),
	   func = {args = (GCState, Word64, Word64, Word64),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int64, Word64),
				res = Some Objptr},
		   readsStackTop = true,
		   return = Objptr (opt_8),
		   symbolScope = private,
		   target = GC_arrayAllocate,
		   writesStackTop = true},
	   return = Some L_153}
  L_153 (x_11503: Objptr (opt_8)) CReturn {func = {args = (GCState,
							   Word64,
							   Word64,
							   Word64),
						   bytesNeeded = None,
						   convention = cdecl,
						   ensuresBytesFree = true,
						   mayGC = true,
						   maySwitchThreads = false,
						   modifiesFrontier = true,
						   prototype = {args = (CPointer,
									Word64,
									Int64,
									Word64),
								res = Some Objptr},
						   readsStackTop = true,
						   return = Objptr (opt_8),
						   symbolScope = private,
						   target = GC_arrayAllocate,
						   writesStackTop = true}} = 
    loop_39 (0x0: Word64)
  loop_39 (x_11505: Word64) Jump = 
    x_11506: Word32 = WordS64_lt (x_11505, 0x21: Word64)
    switch {test = x_11506, default = None, cases = ((0x0, L_155), (0x1, L_154))}
  L_155 () Jump = 
    CCall {args = (<GCState>, 0x0: Word64, 0x41: Word64, opt_8),
	   func = {args = (GCState, Word64, Word64, Word64),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int64, Word64),
				res = Some Objptr},
		   readsStackTop = true,
		   return = Objptr (opt_8),
		   symbolScope = private,
		   target = GC_arrayAllocate,
		   writesStackTop = true},
	   return = Some L_156}
  L_156 (x_11508: Objptr (opt_8)) CReturn {func = {args = (GCState,
							   Word64,
							   Word64,
							   Word64),
						   bytesNeeded = None,
						   convention = cdecl,
						   ensuresBytesFree = true,
						   mayGC = true,
						   maySwitchThreads = false,
						   modifiesFrontier = true,
						   prototype = {args = (CPointer,
									Word64,
									Int64,
									Word64),
								res = Some Objptr},
						   readsStackTop = true,
						   return = Objptr (opt_8),
						   symbolScope = private,
						   target = GC_arrayAllocate,
						   writesStackTop = true}} = 
    loop_40 (0x0: Word64)
  loop_40 (x_11510: Word64) Jump = 
    x_11511: Word32 = WordS64_lt (x_11510, 0x41: Word64)
    switch {test = x_11511, default = None, cases = ((0x0, L_158), (0x1, L_157))}
  L_158 () Jump = 
    loop_41 (0x0: Word64)
  loop_41 (x_11513: Word64) Jump = 
    x_11514: Word32 = WordS64_lt (x_11513, 0x1: Word64)
    switch {test = x_11514, default = None, cases = ((0x0, L_160), (0x1, L_159))}
  L_160 () Jump = 
    x_11684: Word32 = CPointer_lt (Limit, Frontier)
    switch {test = x_11684, default = None, cases = ((0x0, L_162), (0x1, L_161))}
  L_162 () Jump = 
    x_11522: Objptr (opt_11) = OP (messagers_1, 0): Objptr (opt_11)
    x_11621: Objptr (opt_11) = Object {header = 0x17, size = 24}
    x_11690: Bits32 = WordU8_extdToWord32 (Cast (0x1: Word8, [Word2, Bits6]))
    OW32 (x_11621, 0): [Word2, Bits30] = Cast (x_11690, [Word2, Bits30])
    OW32 (x_11621, 4): Bits32 = Cast (0x0: Word32, Bits32)
    OP (x_11621, 8): Objptr (opt_11) = x_11522
    x_11689: Word64 = WordU64_rshift (Cast (messagers_1, Bits64), 0x8: Word32)
    XW8 (CardMapAbsolute, x_11689, 1, 0) = 0x1: Word8
    OP (messagers_1, 0): Objptr (opt_11) = x_11621
    x_11520: Objptr (opt_11) = OP (messagers_1, 0): Objptr (opt_11)
    x_11620: Objptr (opt_11) = Object {header = 0x17, size = 24}
    x_11688: Bits32 = WordU8_extdToWord32 (Cast (0x2: Word8, [Word2, Bits6]))
    OW32 (x_11620, 0): [Word2, Bits30] = Cast (x_11688, [Word2, Bits30])
    OW32 (x_11620, 4): Bits32 = Cast (0x0: Word32, Bits32)
    OP (x_11620, 8): Objptr (opt_11) = x_11520
    x_11687: Word64 = WordU64_rshift (Cast (messagers_1, Bits64), 0x8: Word32)
    XW8 (CardMapAbsolute, x_11687, 1, 0) = 0x1: Word8
    OP (messagers_1, 0): Objptr (opt_11) = x_11620
    x_11518: Objptr (opt_11) = OP (messagers_1, 0): Objptr (opt_11)
    x_11619: Objptr (opt_11) = Object {header = 0x17, size = 24}
    x_11686: Bits32 = WordU8_extdToWord32 (Cast (0x0: Word8, [Word2, Bits6]))
    OW32 (x_11619, 0): [Word2, Bits30] = Cast (x_11686, [Word2, Bits30])
    OW32 (x_11619, 4): Bits32 = Cast (0x0: Word32, Bits32)
    OP (x_11619, 8): Objptr (opt_11) = x_11518
    x_11685: Word64 = WordU64_rshift (Cast (messagers_1, Bits64), 0x8: Word32)
    XW8 (CardMapAbsolute, x_11685, 1, 0) = 0x1: Word8
    OP (messagers_1, 0): Objptr (opt_11) = x_11619
    exiting_1: Objptr (opt_10) = Object {header = 0x15, size = 16}
    OW32 (exiting_1, 0): Word32 = 0x0: Word32
    OW32 (exiting_1, 4): Bits32 = Cast (0x0: Word32, Bits32)
    x_11516: Word32 = OW32 (exiting_1, 0): Word32
    switch {test = x_11516, default = None, cases = ((0x0, L_164), (0x1, L_163))}
  L_164 () Jump = 
    OW32 (exiting_1, 0): Word32 = 0x1: Word32
    CCall {args = (<GCState>, 0x0: Word32),
	   func = {args = (GCState, Word32),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = false,
		   mayGC = false,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Int32), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = MLton_halt,
		   writesStackTop = true},
	   return = None}
  L_163 () Jump = 
    CCall {args = ("Top-level suffix raised exception.
": Objptr (opt_3)),
	   func = {args = (Objptr (opt_3)),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = false,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (Objptr), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = Stdio_print,
		   writesStackTop = true},
	   return = Some L_165}
  L_165 () CReturn {func = {args = (Objptr (opt_3)),
			    bytesNeeded = None,
			    convention = cdecl,
			    ensuresBytesFree = false,
			    mayGC = true,
			    maySwitchThreads = false,
			    modifiesFrontier = true,
			    prototype = {args = (Objptr), res = None},
			    readsStackTop = true,
			    return = Bits0,
			    symbolScope = private,
			    target = Stdio_print,
			    writesStackTop = true}} = 
    CCall {args = (<GCState>, 0x1: Word32),
	   func = {args = (GCState, Word32),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = false,
		   mayGC = false,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Int32), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = MLton_halt,
		   writesStackTop = true},
	   return = None}
  L_161 () Jump = 
    CCall {args = (<GCState>, 0x0: Word64, 0x0: Word32),
	   func = {args = (GCState, Word64, Word32),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int32), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = GC_collect,
		   writesStackTop = true},
	   return = Some L_166}
  L_166 () CReturn {func = {args = (GCState, Word64, Word32),
			    bytesNeeded = None,
			    convention = cdecl,
			    ensuresBytesFree = true,
			    mayGC = true,
			    maySwitchThreads = false,
			    modifiesFrontier = true,
			    prototype = {args = (CPointer, Word64, Int32),
					 res = None},
			    readsStackTop = true,
			    return = Bits0,
			    symbolScope = private,
			    target = GC_collect,
			    writesStackTop = true}} = 
    L_162 ()
  L_159 () Jump = 
    x_11515: Word64 = Word64_add (0x1: Word64, x_11513)
    loop_41 (x_11515)
  L_157 () Jump = 
    XW8 (x_11508, x_11510, 1, 0) = 0x0: Word8
    x_11512: Word64 = Word64_add (x_11510, 0x1: Word64)
    loop_40 (x_11512)
  L_154 () Jump = 
    XW8 (x_11503, x_11505, 1, 0) = 0x0: Word8
    x_11507: Word64 = Word64_add (0x1: Word64, x_11505)
    loop_39 (x_11507)
  L_151 () Jump = 
    x_11502: Word64 = Word64_add (x_11500, 0x1: Word64)
    loop_38 (x_11502)
  L_149 () Jump = 
    x_11494: Word8 = WordU64_extdToWord8 (x_11492)
    L_18 (x_11605, Cast (0x3930: Word16, [Word8, Word8]))
  L_18 (x_11496: Objptr (opt_12), x_11495: [Word8, Word8]) Jump = 
    x_11692: [Word8, Word8] = WordU16_rshift (x_11495, 0x8: Word32)
    x_11693: Word8 = WordU16_extdToWord8 (x_11692)
    x_11691: Word8 = WordU16_extdToWord8 (x_11495)
    x_11497: Word32 = WordU8_lt (x_11494, x_11691)
    switch {test = x_11497, default = None, cases = ((0x0, L_168), (0x1, L_167))}
  L_168 () Jump = 
    x_11499: Word32 = WordU8_lt (x_11693, x_11494)
    switch {test = x_11499, default = None, cases = ((0x0, L_170), (0x1, L_169))}
  L_170 () Jump = 
    L_21 ()
  L_21 () Jump = 
    x_11498: Word64 = Word64_add (x_11492, 0x1: Word64)
    loop_37 (x_11498)
  L_169 () Jump = 
    L_20 ()
  L_20 () Jump = 
    switch {test = Cast (x_11496, Bits64),
	    default = Some L_171,
	    cases = ((0x1, L_172))}
  L_171 () Jump = 
    x_11618: Objptr (opt_12) = OP (x_11496, 8): Objptr (opt_12)
    x_11617: [Word8, Word8] = OW16 (x_11496, 0): [Word8, Word8]
    L_18 (x_11618, x_11617)
  L_172 () Jump = 
    L_21 ()
  L_167 () Jump = 
    L_20 ()
  L_147 () Jump = 
    x_11491: Word64 = Word64_add (0x1: Word64, x_11489)
    loop_36 (x_11491)
  L_145 () Jump = 
    x_11488: Word64 = Word64_add (x_11486, 0x1: Word64)
    loop_35 (x_11488)
  L_143 () Jump = 
    x_11485: Word64 = Word64_add (0x1: Word64, x_11483)
    loop_34 (x_11485)
  L_140 () Jump = 
    L_9 ()
  L_134 () Jump = 
    CCall {args = (<GCState>, 0x0: Word64, 0x0: Word32),
	   func = {args = (GCState, Word64, Word32),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int32), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = GC_collect,
		   writesStackTop = true},
	   return = Some L_173}
  L_173 () CReturn {func = {args = (GCState, Word64, Word32),
			    bytesNeeded = None,
			    convention = cdecl,
			    ensuresBytesFree = true,
			    mayGC = true,
			    maySwitchThreads = false,
			    modifiesFrontier = true,
			    prototype = {args = (CPointer, Word64, Int32),
					 res = None},
			    readsStackTop = true,
			    return = Bits0,
			    symbolScope = private,
			    target = GC_collect,
			    writesStackTop = true}} = 
    L_135 ()
  L_131 () Jump = 
    L_6 ()
  L_125 () Jump = 
    CCall {args = (<GCState>, 0x0: Word64, 0x0: Word32),
	   func = {args = (GCState, Word64, Word32),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int32), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = GC_collect,
		   writesStackTop = true},
	   return = Some L_174}
  L_174 () CReturn {func = {args = (GCState, Word64, Word32),
			    bytesNeeded = None,
			    convention = cdecl,
			    ensuresBytesFree = true,
			    mayGC = true,
			    maySwitchThreads = false,
			    modifiesFrontier = true,
			    prototype = {args = (CPointer, Word64, Int32),
					 res = None},
			    readsStackTop = true,
			    return = Bits0,
			    symbolScope = private,
			    target = GC_collect,
			    writesStackTop = true}} = 
    L_126 ()
  L_123 () Jump = 
    CCall {args = (<GCState>, 0x0: Word64, 0x0: Word32),
	   func = {args = (GCState, Word64, Word32),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int32), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = GC_collect,
		   writesStackTop = true},
	   return = Some L_175}
  L_175 () CReturn {func = {args = (GCState, Word64, Word32),
			    bytesNeeded = None,
			    convention = cdecl,
			    ensuresBytesFree = true,
			    mayGC = true,
			    maySwitchThreads = false,
			    modifiesFrontier = true,
			    prototype = {args = (CPointer, Word64, Int32),
					 res = None},
			    readsStackTop = true,
			    return = Bits0,
			    symbolScope = private,
			    target = GC_collect,
			    writesStackTop = true}} = 
    L_124 ()
  L_120 () Jump = 
    L_3 ()
  L_110 () Jump = 
    CCall {args = (<GCState>, 0x0: Word64, 0x0: Word32),
	   func = {args = (GCState, Word64, Word32),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int32), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = GC_collect,
		   writesStackTop = true},
	   return = Some L_176}
  L_176 () CReturn {func = {args = (GCState, Word64, Word32),
			    bytesNeeded = None,
			    convention = cdecl,
			    ensuresBytesFree = true,
			    mayGC = true,
			    maySwitchThreads = false,
			    modifiesFrontier = true,
			    prototype = {args = (CPointer, Word64, Int32),
					 res = None},
			    readsStackTop = true,
			    return = Bits0,
			    symbolScope = private,
			    target = GC_collect,
			    writesStackTop = true}} = 
    L_111 ()
  L_108 () Jump = 
    CCall {args = (<GCState>, 0x0: Word64, 0x0: Word32),
	   func = {args = (GCState, Word64, Word32),
		   bytesNeeded = None,
		   convention = cdecl,
		   ensuresBytesFree = true,
		   mayGC = true,
		   maySwitchThreads = false,
		   modifiesFrontier = true,
		   prototype = {args = (CPointer, Word64, Int32), res = None},
		   readsStackTop = true,
		   return = Bits0,
		   symbolScope = private,
		   target = GC_collect,
		   writesStackTop = true},
	   return = Some L_177}
  L_177 () CReturn {func = {args = (GCState, Word64, Word32),
			    bytesNeeded = None,
			    convention = cdecl,
			    ensuresBytesFree = true,
			    mayGC = true,
			    maySwitchThreads = false,
			    modifiesFrontier = true,
			    prototype = {args = (CPointer, Word64, Int32),
					 res = None},
			    readsStackTop = true,
			    return = Bits0,
			    symbolScope = private,
			    target = GC_collect,
			    writesStackTop = true}} = 
    L_109 ()
