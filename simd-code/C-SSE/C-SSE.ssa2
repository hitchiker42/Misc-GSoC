MLton gc73dc79-dirty (built Mon May 27 16:34:55 EDT 2013 on Tucker-Portable-Arch)
  created this file on Thu Jun 13 16:50:06 2013.
Do not edit this file.
Flag settings: 
   align: 8
   atMLtons: (C-SSE, @MLton, --)
   chunk: chunk per function
   closureConvertGlobalize: true
   closureConvertShrink: true
   codegen: amd64
   contifyIntoMain: false
   debug: false
   defaultChar: char8
   defaultWideChar: widechar32
   defaultInt: int32
   defaultReal: real64
   defaultWord: word32
   diag passes: []
   drop passes: []
   elaborate allowConstant (default): false
   elaborate allowConstant (enabled): true
   elaborate allowFFI (default): true
   elaborate allowFFI (enabled): true
   elaborate allowPrim (default): false
   elaborate allowPrim (enabled): true
   elaborate allowOverload (default): false
   elaborate allowOverload (enabled): true
   elaborate allowRebindEquals (default): false
   elaborate allowRebindEquals (enabled): true
   elaborate deadCode (default): false
   elaborate deadCode (enabled): true
   elaborate forceUsed (default): false
   elaborate forceUsed (enabled): true
   elaborate ffiStr (default): 
   elaborate ffiStr (enabled): true
   elaborate nonexhaustiveExnMatch (default): default
   elaborate nonexhaustiveExnMatch (enabled): true
   elaborate nonexhaustiveMatch (default): warn
   elaborate nonexhaustiveMatch (enabled): true
   elaborate redundantMatch (default): warn
   elaborate redundantMatch (enabled): true
   elaborate resolveScope (default): strdec
   elaborate resolveScope (enabled): true
   elaborate sequenceNonUnit (default): ignore
   elaborate sequenceNonUnit (enabled): true
   elaborate warnUnused (default): false
   elaborate warnUnused (enabled): true
   elaborate only: false
   emit main: true
   export header: None
   exn history: false
   generated output format: executable
   gc check: Limit
   indentation: 3
   inlineIntoMain: true
   inlineLeafA: {loops = true, repeat = true, size = Some 20}
   inlineLeafB: {loops = true, repeat = true, size = Some 40}
   inlineNonRec: {small = 60, product = 320}
   input file: C-SSE.ssa2
   keep CoreML: false
   keep def use: true
   keep dot: true
   keep Machine: true
   keep passes: []
   keep RSSA: true
   keep SSA: true
   keep SSA2: true
   keep SXML: true
   keep XML: true
   extra_: false
   lib dir: /home/tucker/usr/lib/mlton
   lib target dir: /home/tucker/usr/lib/mlton/targets/self
   loop passes: 1
   mark cards: true
   max function size: 10000
   mlb path vars: [{var = MLTON_ROOT, path = $(LIB_MLTON_DIR)/sml}, {var = SML_LIB, path = $(LIB_MLTON_DIR)/sml}]
   native commented: 0
   native live stack: false
   native optimize: 1
   native move hoist: true
   native copy prop: true
   native copy prop cutoff: 1000
   native cutoff: 100
   native live transfer: 8
   native shuffle: true
   native ieee fp: false
   native split: Some 20000
   optimizationPasses: [<ssa2::default>, <ssa::default>, <sxml::default>, <xml::default>]
   polyvariance: Some {hofo = true, rounds = 2, small = 30, product = 300}
   prefer abs paths: false
   prof passes: []
   profile: None
   profile branch: false
   profile C: []
   profile IL: ProfileSource
   profile include/exclude: [(Seq [Star [.], Or [Seq [Seq [[$], [(], [S], [M], [L], [_], [L], [I], [B], [)]]]], Star [.]], false)]
   profile raise: false
   profile stack: false
   profile val: false
   show basis: Some C-SSE.basis
   show def-use: Some C-SSE.def_use
   show types: true
   target: self
   target arch: AMD64
   target OS: Linux
   type check: false
   verbosity: Silent
   warn unrecognized annotation: true
   warn deprecated features: true
   zone cut depth: 100


Datatypes:
lambdas_0 = Env_1 of (unit) | Env_0 of (unit) | Env_2 of (unit)
list_8 = nil_8 of (unit) | ::_8 of (list_8)
list_7 = nil_7 of (unit) | ::_7 of (list_7 * (word64 * (word8) vector))
list_5 = nil_5 of (unit) | ::_5 of (list_5 * (word8) vector)
list_1 = nil_1 of (unit) | ::_1 of (list_1 * (word8 * word8))
list_0 = nil_0 of (unit) | ::_0 of (list_0 * lambdas_0)
bool = false of (unit) | true of (unit)


Globals:
global_0: (word8) vector = "unhandled exception: "
global_1: (word8) vector = "Overflow"
global_2: (word8) vector = "Fail"
global_3: (word8) vector = "
"
global_4: (word8) vector = "unhandled exception in Basis Library"
global_5: word32 = 0x0
global_6: word32 = 0x1
global_8: word64 = 0x0
global_9: word64 = 0x1
x_11600: nil_8 of (unit) = nil_8 ()
global_10: list_8 = x_11600: list_8
x_11601: ::_8 of (list_8) = ::_8 (global_10)
global_12: list_8 = x_11601: list_8
global_13: word64 = 0x7FFFFFFF
x_11602: nil_7 of (unit) = nil_7 ()
global_14: list_7 = x_11602: list_7
global_15: (word8 ref) vector = Array_array (global_8)
global_16: (word8 ref) vector = Array_array (global_8)
global_17: (word8 ref) vector = Array_array (global_8)
global_18: word8 = 0x0
global_19: word64 = 0x100
global_20: word8 = 0x30
global_21: word8 = 0x39
global_22: (word8 * word8) = (global_21, global_20)
global_23: word8 = 0x66
global_24: word8 = 0x61
global_25: (word8 * word8) = (global_23, global_24)
global_27: word8 = 0x46
global_28: word8 = 0x41
global_29: (word8 * word8) = (global_27, global_28)
x_11603: nil_1 of (unit) = nil_1 ()
global_31: list_1 = x_11603: list_1
x_11604: ::_1 of (list_1 * (word8 * word8)) = ::_1 (global_31, global_29)
global_32: list_1 = x_11604: list_1
x_11605: ::_1 of (list_1 * (word8 * word8)) = ::_1 (global_32, global_25)
global_33: list_1 = x_11605: list_1
x_11606: true of (unit) = true ()
global_34: bool = x_11606: bool
global_35: word64 = 0x7FFFFFFFFFFFFFFF
x_11607: false of (unit) = false ()
global_36: bool = x_11607: bool
x_11608: nil_5 of (unit) = nil_5 ()
global_37: list_5 = x_11608: list_5
global_38: (word8) vector = "Top-level suffix raised exception.
"
global_39: (word8) vector = "MLton.Exit.wrapSuffix"
global_40: (word8) vector = "Fail: "
x_11609: ::_5 of (list_5 * (word8) vector) = ::_5 (global_37, global_3)
global_41: list_5 = x_11609: list_5
global_42: (word8) vector = "Top-level handler raised exception.
"
global_43: word64 = 0x4000000000000000
x_11610: nil_0 of (unit) = nil_0 ()
global_44: list_0 = x_11610: list_0
x_11611: Env_0 of (unit) = Env_0 ()
global_45: lambdas_0 = x_11611: lambdas_0
x_11612: Env_1 of (unit) = Env_1 ()
global_46: lambdas_0 = x_11612: lambdas_0
x_11613: Env_2 of (unit) = Env_2 ()
global_47: lambdas_0 = x_11613: lambdas_0
global_48: (word8) vector = "toplevel handler not installed"


Main: main_0


Functions:
fun main_0 (): {raises = None, returns = Some ()} = L_0 ()
  L_0 ()
    loop_28 (global_12, global_9, global_43)
  loop_28 (x_11473: list_8, x_11472: word64, x_11471: word64)
    x_11474: bool = Word64_equal (x_11471, global_8)
    case x_11474 of
      true => L_2 | false => L_1
  L_2 ()
    case x_11473 of
      nil_8 => L_3 | ::_8 => L_84
  L_3 ()
    messagers_1: (list_0 ref) = (global_44)
    loop_30 (global_12, global_9, global_35)
  loop_30 (x_11477: list_8, x_11476: word64, x_11475: word64)
    x_11478: bool = Word64_equal (x_11475, global_8)
    case x_11478 of
      true => L_5 | false => L_4
  L_5 ()
    case x_11477 of
      nil_8 => L_6 | ::_8 => L_85
  L_6 ()
    loop_32 (global_12, global_9, global_35)
  loop_32 (x_11481: list_8, x_11480: word64, x_11479: word64)
    x_11482: bool = Word64_equal (global_8, x_11479)
    case x_11482 of
      true => L_8 | false => L_7
  L_8 ()
    case x_11481 of
      nil_8 => L_9 | ::_8 => L_86
  L_9 ()
    loop_34 (global_8)
  loop_34 (x_11483: word64)
    x_11484: bool = WordS64_lt (x_11483, global_19)
    case x_11484 of
      true => L_11 | false => L_10
  L_11 ()
    x_11485: word64 = Word64_add (global_9, x_11483)
    loop_34 (x_11485)
  L_10 ()
    loop_35 (global_8)
  loop_35 (x_11486: word64)
    x_11487: bool = WordS64_lt (x_11486, global_19)
    case x_11487 of
      true => L_13 | false => L_12
  L_13 ()
    x_11488: word64 = Word64_add (x_11486, global_9)
    loop_35 (x_11488)
  L_12 ()
    loop_36 (global_8)
  loop_36 (x_11489: word64)
    x_11490: bool = WordS64_lt (x_11489, global_19)
    case x_11490 of
      true => L_15 | false => L_14
  L_15 ()
    x_11491: word64 = Word64_add (global_9, x_11489)
    loop_36 (x_11491)
  L_14 ()
    loop_37 (global_8)
  loop_37 (x_11492: word64)
    x_11493: bool = WordS64_lt (x_11492, global_19)
    case x_11493 of
      true => L_17 | false => L_16
  L_17 ()
    x_11494: word8 = WordS64_extdToWord8 (x_11492)
    L_18 (global_33, global_22)
  L_18 (x_11496: list_1, x_11495: (word8 * word8))
    x_11615: word8 = #0 x_11495
    x_11614: word8 = #1 x_11495
    x_11497: bool = WordU8_lt (x_11494, x_11614)
    case x_11497 of
      true => L_20 | false => L_19
  L_20 ()
    case x_11496 of
      nil_1 => L_21 | ::_1 => L_87
  L_21 ()
    x_11498: word64 = Word64_add (x_11492, global_9)
    loop_37 (x_11498)
  L_87 (x_11616: ::_1 of (list_1 * (word8 * word8)))
    x_11618: list_1 = #0 x_11616
    x_11617: (word8 * word8) = #1 x_11616
    L_18 (x_11618, x_11617)
  L_19 ()
    x_11499: bool = WordU8_lt (x_11615, x_11494)
    case x_11499 of
      true => L_20 | false => L_21
  L_16 ()
    loop_38 (global_8)
  loop_38 (x_11500: word64)
    x_11501: bool = WordS64_lt (x_11500, global_19)
    case x_11501 of
      true => L_23 | false => L_22
  L_23 ()
    x_11502: word64 = Word64_add (x_11500, global_9)
    loop_38 (x_11502)
  L_22 ()
    x_11504: word64 = 0x21
    x_11503: (word8 ref) vector = Array_array (x_11504)
    loop_39 (global_8)
  loop_39 (x_11505: word64)
    x_11506: bool = WordS64_lt (x_11505, x_11504)
    case x_11506 of
      true => L_25 | false => L_24
  L_25 ()
    x_11503[x_11505] := global_18
    x_11507: word64 = Word64_add (global_9, x_11505)
    loop_39 (x_11507)
  L_24 ()
    x_11509: word64 = 0x41
    x_11508: (word8 ref) vector = Array_array (x_11509)
    loop_40 (global_8)
  loop_40 (x_11510: word64)
    x_11511: bool = WordS64_lt (x_11510, x_11509)
    case x_11511 of
      true => L_27 | false => L_26
  L_27 ()
    x_11508[x_11510] := global_18
    x_11512: word64 = Word64_add (x_11510, global_9)
    loop_40 (x_11512)
  L_26 ()
    loop_41 (global_8)
  loop_41 (x_11513: word64)
    x_11514: bool = WordS64_lt (x_11513, global_9)
    case x_11514 of
      true => L_29 | false => L_28
  L_29 ()
    x_11515: word64 = Word64_add (global_9, x_11513)
    loop_41 (x_11515)
  L_28 ()
    x_11522: list_0 = #0 messagers_1
    x_11621: ::_0 of (list_0 * lambdas_0) = ::_0 (x_11522, global_45)
    x_11521: list_0 = x_11621: list_0
    messagers_1 := x_11521
    x_11520: list_0 = #0 messagers_1
    x_11620: ::_0 of (list_0 * lambdas_0) = ::_0 (x_11520, global_46)
    x_11519: list_0 = x_11620: list_0
    messagers_1 := x_11519
    x_11518: list_0 = #0 messagers_1
    x_11619: ::_0 of (list_0 * lambdas_0) = ::_0 (x_11518, global_47)
    x_11517: list_0 = x_11619: list_0
    messagers_1 := x_11517
    exiting_1: (bool ref) = (global_36)
    x_11516: bool = #0 exiting_1
    case x_11516 of
      true => L_31 | false => L_30
  L_31 ()
    Stdio_print (global_38)
    L_32 (MLton_halt (global_6))
  L_32 ()
    x_11523: list_0 = #0 messagers_1
    case x_11523 of
      nil_0 => L_34 | ::_0 => L_88
  L_34 ()
    L_35 (global_2)
  L_35 (x_11524: (word8) vector)
    x_11623: ::_5 of (list_5 * (word8) vector) = ::_5 (global_41, x_11524)
    x_11526: list_5 = x_11623: list_5
    x_11622: ::_5 of (list_5 * (word8) vector) = ::_5 (x_11526, global_0)
    x_11525: list_5 = x_11622: list_5
    concat_3 (x_11525) NonTail {cont = print_1, handler = Handle L_36}
  print_1 (x_11527: (word8) vector)
    Stdio_print (x_11527)
    x_11528: bool = #0 exiting_1
    case x_11528 of
      true => L_36 | false => L_37
  L_36 ()
    Stdio_print (global_42)
    L_38 (MLton_halt (global_6))
  L_38 ()
    MLton_bug (global_48)
    return ()
  L_37 ()
    exiting_1 := global_34
    L_36 (MLton_halt (global_6))
  L_88 (x_11624: ::_0 of (list_0 * lambdas_0))
    x_11626: list_0 = #0 x_11624
    x_11625: lambdas_0 = #1 x_11624
    L_33 (x_11626, x_11625)
  L_33 (x_11530: list_0, x_11529: lambdas_0)
    case x_11529 of
      Env_1 => L_41 | Env_0 => L_40 | Env_2 => L_39
  L_41 ()
    case x_11530 of
      nil_0 => L_34 | ::_0 => L_89
  L_89 (x_11627: ::_0 of (list_0 * lambdas_0))
    x_11629: list_0 = #0 x_11627
    x_11628: lambdas_0 = #1 x_11627
    L_33 (x_11629, x_11628)
  L_40 ()
    x_11631: ::_5 of (list_5 * (word8) vector) = ::_5 (global_37, global_39)
    x_11532: list_5 = x_11631: list_5
    x_11630: ::_5 of (list_5 * (word8) vector) = ::_5 (x_11532, global_40)
    x_11531: list_5 = x_11630: list_5
    concat_3 (x_11531) NonTail {cont = L_35, handler = Handle L_36}
  L_39 ()
    case x_11530 of
      nil_0 => L_34 | ::_0 => L_90
  L_90 (x_11632: ::_0 of (list_0 * lambdas_0))
    x_11634: list_0 = #0 x_11632
    x_11633: lambdas_0 = #1 x_11632
    L_33 (x_11634, x_11633)
  L_30 ()
    exiting_1 := global_34
    L_31 (MLton_halt (global_5))
  L_86 (x_11635: ::_8 of (list_8))
    x_11636: list_8 = #0 x_11635
    loop_33 (x_11636)
  loop_33 (x_11533: list_8)
    case x_11533 of
      nil_8 => L_9 | ::_8 => L_91
  L_91 (x_11637: ::_8 of (list_8))
    x_11638: list_8 = #0 x_11637
    loop_33 (x_11638)
  L_7 ()
    L_42 (x_11480 + global_9) Overflow => L_44 ()
  L_44 ()
    Stdio_print (global_0)
    Stdio_print (global_1)
    Stdio_print (global_3)
    MLton_bug (global_4)
    return ()
  L_42 (x_11535: word64)
    x_11639: ::_8 of (list_8) = ::_8 (x_11481)
    x_11536: list_8 = x_11639: list_8
    loop_32 (x_11536, x_11535, global_8)
  L_85 (x_11640: ::_8 of (list_8))
    x_11641: list_8 = #0 x_11640
    loop_31 (x_11641)
  loop_31 (x_11537: list_8)
    case x_11537 of
      nil_8 => L_6 | ::_8 => L_92
  L_92 (x_11642: ::_8 of (list_8))
    x_11643: list_8 = #0 x_11642
    loop_31 (x_11643)
  L_4 ()
    L_45 (x_11476 + global_9) Overflow => L_44 ()
  L_45 (x_11538: word64)
    x_11644: ::_8 of (list_8) = ::_8 (x_11477)
    x_11539: list_8 = x_11644: list_8
    loop_30 (x_11539, x_11538, global_8)
  L_84 (x_11645: ::_8 of (list_8))
    x_11646: list_8 = #0 x_11645
    loop_29 (x_11646)
  loop_29 (x_11540: list_8)
    case x_11540 of
      nil_8 => L_3 | ::_8 => L_93
  L_93 (x_11647: ::_8 of (list_8))
    x_11648: list_8 = #0 x_11647
    loop_29 (x_11648)
  L_1 ()
    L_47 (x_11472 + global_9) Overflow => L_44 ()
  L_47 (x_11541: word64)
    x_11649: ::_8 of (list_8) = ::_8 (x_11473)
    x_11542: list_8 = x_11649: list_8
    loop_28 (x_11542, x_11541, global_8)
fun concat_3 (x_11543: list_5): {raises = Some (),
				 returns = Some ((word8) vector)} = L_49 ()
  L_49 ()
    case x_11543 of
      nil_5 => L_52 | ::_5 => L_94
  L_52 ()
    x_11544: (word8) vector = Array_toVector (global_17)
    return x_11544
  L_94 (x_11650: ::_5 of (list_5 * (word8) vector))
    x_11652: list_5 = #0 x_11650
    x_11651: (word8) vector = #1 x_11650
    L_53 (x_11652, x_11651, global_14)
  L_53 (x_11549: list_5, x_11548: (word8) vector, x_11547: list_7)
    x_11552: word64 = Array_length (x_11548)
    x_11551: (word64 * (word8) vector) = (x_11552, x_11548)
    x_11653: ::_7 of (list_7 * (word64 * (word8) vector)) = ::_7 (x_11547,
								  x_11551)
    x_11550: list_7 = x_11653: list_7
    case x_11549 of
      nil_5 => L_55 | ::_5 => L_95
  L_55 ()
    L_56 (x_11547, x_11551, global_14)
  L_56 (x_11555: list_7, x_11554: (word64 * (word8) vector), x_11553: list_7)
    x_11654: ::_7 of (list_7 * (word64 * (word8) vector)) = ::_7 (x_11553,
								  x_11554)
    x_11556: list_7 = x_11654: list_7
    case x_11555 of
      nil_7 => L_58 | ::_7 => L_96
  L_58 ()
    case x_11553 of
      nil_7 => L_59 | _ => L_60
  L_59 ()
    x_11656: (word8) vector = #1 x_11554
    x_11655: word64 = #0 x_11554
    x_11559: word64 = Array_length (x_11656)
    x_11557: bool = Word64_equal (x_11559, x_11655)
    case x_11557 of
      true => L_62 | false => L_61
  L_62 ()
    return x_11656
  L_61 ()
    x_11561: bool = Word64_equal (global_8, x_11655)
    case x_11561 of
      true => L_64 | false => L_63
  L_64 ()
    L_65 (global_16)
  L_65 (a_18: (word8 ref) vector)
    loop_42 (global_8)
  loop_42 (x_11562: word64)
    x_11563: bool = WordS64_lt (x_11562, x_11655)
    case x_11563 of
      true => L_67 | false => L_66
  L_67 ()
    x_11565: word8 = #0 x_11656[x_11562]
    a_18[x_11562] := x_11565
    x_11564: word64 = Word64_add (x_11562, global_9)
    loop_42 (x_11564)
  L_66 ()
    x_11566: (word8) vector = Array_toVector (a_18)
    return x_11566
  L_63 ()
    x_11567: bool = WordU64_lt (global_13, x_11655)
    case x_11567 of
      true => L_69 | false => L_68
  L_69 ()
    raise ()
  L_68 ()
    x_11568: (word8 ref) vector = Array_array (x_11655)
    L_65 (x_11568)
  L_60 ()
    L_70 (x_11553, x_11554, global_8)
  L_70 (x_11571: list_7, x_11570: (word64 * (word8) vector), x_11569: word64)
    x_11657: word64 = #0 x_11570
    x_11572: word64 = Word64_add (x_11657, x_11569)
    case x_11571 of
      nil_7 => L_72 | ::_7 => L_97
  L_72 ()
    x_11574: bool = Word64_equal (global_8, x_11572)
    case x_11574 of
      true => L_74 | false => L_73
  L_74 ()
    L_75 (global_15)
  L_75 (a_19: (word8 ref) vector)
    loop_43 (x_11553, x_11554, global_8, global_8)
  loop_43 (x_11578: list_7,
	   x_11577: (word64 * (word8) vector),
	   x_11576: word64,
	   x_11575: word64)
    x_11579: bool = WordS64_lt (x_11575, x_11572)
    case x_11579 of
      true => L_77 | false => L_76
  L_77 ()
    loop_44 (x_11578, x_11577, x_11576)
  loop_44 (x_11582: list_7, x_11581: (word64 * (word8) vector), x_11580: word64)
    x_11658: word64 = #0 x_11581
    x_11583: bool = WordS64_lt (x_11580, x_11658)
    case x_11583 of
      true => L_79 | false => L_78
  L_79 ()
    x_11659: (word8) vector = #1 x_11581
    x_11586: word8 = #0 x_11659[x_11580]
    x_11587: word64 = Word64_add (x_11580, global_9)
    a_19[x_11575] := x_11586
    x_11585: word64 = Word64_add (global_9, x_11575)
    loop_43 (x_11582, x_11581, x_11587, x_11585)
  L_78 ()
    case x_11582 of
      nil_7 => L_81 | ::_7 => L_98
  L_81 ()
    raise ()
  L_98 (x_11660: ::_7 of (list_7 * (word64 * (word8) vector)))
    x_11662: list_7 = #0 x_11660
    x_11661: (word64 * (word8) vector) = #1 x_11660
    loop_44 (x_11662, x_11661, global_8)
  L_76 ()
    x_11591: (word8) vector = Array_toVector (a_19)
    return x_11591
  L_73 ()
    x_11592: bool = WordU64_lt (global_13, x_11572)
    case x_11592 of
      true => L_83 | false => L_82
  L_83 ()
    raise ()
  L_82 ()
    x_11593: (word8 ref) vector = Array_array (x_11572)
    L_75 (x_11593)
  L_97 (x_11663: ::_7 of (list_7 * (word64 * (word8) vector)))
    x_11665: list_7 = #0 x_11663
    x_11664: (word64 * (word8) vector) = #1 x_11663
    L_70 (x_11665, x_11664, x_11572)
  L_96 (x_11666: ::_7 of (list_7 * (word64 * (word8) vector)))
    x_11668: list_7 = #0 x_11666
    x_11667: (word64 * (word8) vector) = #1 x_11666
    L_56 (x_11668, x_11667, x_11556)
  L_95 (x_11669: ::_5 of (list_5 * (word8) vector))
    x_11671: list_5 = #0 x_11669
    x_11670: (word8) vector = #1 x_11669
    L_53 (x_11671, x_11670, x_11550)
