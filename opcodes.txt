5.4.1 MMX Data Transfer Instructions
The data transfer instructions move doubleword and
quadword operands between MMX registers and between
MMX registers and memory.
MOVD Move doubleword
MOVQ Move quadword

5.4.2 MMX Conversion Instructions
The conversion instructions pack and unpack bytes, words, and doublewords
PACKSSWB Pack words into bytes with signed saturation
PACKSSDW Pack doublewords into words with signed saturation
PACKUSWB Pack words into bytes with unsigned saturation.
PUNPCKHBW Unpack high-order bytes
PUNPCKHWD Unpack high-order words
PUNPCKHDQ Unpack high-order doublewords
PUNPCKLBW Unpack low-order bytes
PUNPCKLWD Unpack low-order words
PUNPCKLDQ Unpack low-order doublewords

5.4.3 MMX Packed Arithmetic Instructions
The packed arithmetic instructions perform packed intege
r arithmetic on packed byte, word, and doubleword inte-
gers.
PADDB Add packed byte integers
PADDW Add packed word integers
PADDD Add packed doubleword integers
PADDSB Add packed signed byte in
tegers with signed saturation
PADDSW Add packed signed word in
tegers with signed saturation
PADDUSB Add packed unsigned byte in
tegers with unsigned saturation
PADDUSW Add packed unsigned word
integers with unsigned saturation
PSUBB Subtract packed byte integers
PSUBW Subtract packed word integers
PSUBD Subtract packed
doubleword integers
PSUBSB Subtract packed signed byte
integers with signed saturation
PSUBSW Subtract packed signed word integers with signed saturation
PSUBUSB Subtract packed unsigned byte integers with unsigned saturation
PSUBUSW Subtract packed unsigned
word integers with unsigned
saturation
PMULHW Multiply packed signed word integers and store high result
PMULLW Multiply packed signed word integers and store low result
PMADDWD Multiply and add packed word integers

5.4.4 MMX Comparison Instructions
The compare instructions compare packed bytes, words, or doublewords.

PCMPEQB Compare packed bytes for equal
PCMPEQW Compare packed words for equal
PCMPEQD Compare packed doublewords for equal
PCMPGTB Compare packed signed byte integers for greater than
PCMPGTW Compare packed signedword integers for greater than
PCMPGTD Compare packed signed doubleword integers for greater than

5.4.5 MMX Logical Instructions
The logical instructions perform AND, AND NOT, OR, and XOR operations on quadword operands.
PAND Bitwise logical AND
PANDN Bitwise logical AND NOT
POR Bitwise logical OR
PXOR Bitwise logical exclusive OR

5.4.6 MMX Shift and Rotate Instructions
The shift and rotate instructions shift
and rotate packed bytes, words, or
doublewords, or quadwords in 64-bit
operands.
PSLLW Shift packed words left logical
PSLLD Shift packed doublewords left logical
PSLLQ Shift packed quadword left logical
PSRLW Shift packed words right logical
PSRLD Shift packed doublewords right logical
PSRLQ Shift packed quadword right logical
PSRAW Shift packed words right arithmetic
PSRAD Shift packed doublewords right arithmetic

5.4.7 MMX State Management Instructions
The EMMS instruction clears the
MMX state from the MMX registers.
EMMS Empty MMX state

5.5.1.1 SSE Data Transfer Instructions
SSE data transfer instructions move packed and scalar
single-precision floating-point operands between XMM
registers and between XMM registers and memory.

MOVAPS Move four aligned packed single-precision 
floating-point values between XMM registers or
between and XMM register and memory

MOVUPS Move four unaligned packed single-precision
floating-point values between XMM registers or
between and XMM register and memory

MOVHPS Move two packed single-precision floating-poi
nt values to an from the high quadword of an
XMM register and memory

MOVHLPS Move two packed single-precision floating-p
oint values from the high quadword of an XMM
register to the low quadword of another XMM register

MOVLPS Move two packed single-precision floating-p
oint values to an from the low quadword of an
XMM register and memory

MOVLHPS Move two packed single-precision floating-p
oint values from the low quadword of an XMM
register to the high quadword of another XMM register

MOVMSKPS Extract sign mask from four pack
ed single-precision floating-point values

MOVSS Move scalar single-precision floating-point
value between XMM registers or between an XMM
register and memory

5.5.1.2 SSE Packed Arithmetic Instructions
SSE packed arithmetic instructions perform packed and scalar arithmetic operations on packed and scalar single-
precision floating-point operands.

ADDPS Add packed single-precision floating-point values
ADDSS Add scalar single-precision floating-point values
SUBPS Subtract packed single-precision floating-point values
SUBSS Subtract scalar single-precision floating-point values
MULPS Multiply packed single-precision floating-point values
MULSS Multiply scalar single-precision floating-point values
DIVPS Divide packed single-precision floating-point values
DIVSS Divide scalar single-precision floating-point values
RCPPS Compute reciprocals of packed single-precision floating-point values
RCPSS Compute reciprocal of scalar single-precision floating-point values
SQRTPS Compute square roots of packed single-precision floating-point values
SQRTSS Compute square root of scalar single-precision floating-point values
RSQRTPS Compute reciprocals of square roots of packed single-precision floating-point values
RSQRTSS Compute reciprocal of square root of scalar single-precision floating-point values
MAXPS Return maximum packed single-precision floating-point values
MAXSS Return maximum scalar single-precision floating-point values
MINPS Return minimum packed single-precision floating-point values
MINSS Return minimum scalar single-precision floating-point values

5.5.1.3 SSE Comparison Instructions
SSE compare instructions compare packed and 
scalar single-precision floating-point operands.

CMPPS Compare packed single-precision floating-point values
CMPSS Compare scalar single-precision floating-point values
COMISS Perform ordered comparison of scalar single-precision
floating-point values and set flags in EFLAGS register
UCOMISS Perform unordered comparison of scalar single-precision
floating-point values and set flags in EFLAGS register

5.5.1.4 SSE Logical Instructions
SSE logical instructions perform bitwise AND, AND NOT,
OR, and XOR operations on packed single-precision

floating-point operands.
ANDPS Perform bitwise logical AND of packed single-precision floating-point values
ANDNPS Perform bitwise logical AND NOT of packed single-precision floating-point values
ORPS Perform bitwise logical OR of packed
single-precision floating-point values
XORPS Perform bitwise logical XOR of packed
single-precision floating-point values

5.5.1.5 SSE Shuffle and Unpack Instructions
SSE shuffle and unpack instructions shuffle or interleave
single-precision floating-point values in packed single-
precision floating-point operands.

SHUFPS Shuffles values in packed single-precision floating-point
operands

UNPCKHPS Unpacks and interleaves the two high-order values from two
single-precision floating-point operands

UNPCKLPS Unpacks and interleaves the two low-order values from two
single-precision floating-point operands

5.5.1.6 SSE Conversion Instructions
SSE conversion instructions convert packed and individual
doubleword integers into packed and scalar single-precision
floating-point values and vice versa.

CVTPI2PS Convert packed doubleword integers to
packed single-precision floating-point values

CVTSI2SS Convert doubleword integer to scalar single-precision
floating-point value

CVTPS2PI Convert packed single-precision floati
ng-point values to packed doubleword integers

CVTTPS2PI Convert with truncation packed single-preci
sion floating-point values to packed doubleword integers

CVTSS2SI Convert a scalar single-precision floating-point
value to a doubleword integer

CVTTSS2SI Convert with truncation a scalar single-precision
floating-point value to a scalar doubleword integer

5.5.2 SSE MXCSR State Management Instructions
MXCSR state management instructions allow saving and
restoring the state of the MXCSR control and status register.

LDMXCSR Load MXCSR register
STMXCSR Save MXCSR register state

5.5.3 SSE 64-Bit SIMD Integer Instructions
These SSE 64-bit SIMD integer instructions perform additional
operations on packed bytes, words, or doublewords
contained in MMX registers. They represent enhancements
to the MMX instruction set described in Section 5.4, “MMX™
Instructions.”

PAVGB Compute average of packed unsigned byte integers
PAVGW Compute average of packed unsigned word integers
PEXTRW Extract word
PINSRW Insert word
PMAXUB Maximum of packed unsigned byte integers
PMAXSW Maximum of packed signed word integers
PMINUB Minimum of packed unsigned byte integers
PMINSW Minimum of packed signed word integers
PMOVMSKB Move byte mask
PMULHUW Multiply packed unsigned integers and store high result
PSADBW Compute sum of absolute differences
PSHUFW Shuffle packed integer word in MMX register

5.5.4 SSE Cacheability Control, Prefetch, and Instruction Ordering Instructions
The cacheability control instructions provide control over th
e caching of non-temporal data when storing data from
the MMX and XMM registers to memory. The PREFETCHh
allows data to be prefetched to a selected cache level. The
SFENCE instruction controls instruction ordering on store operations.
MASKMOVQ
Non-temporal store of selected byte
s from an MMX register into memory
MOVNTQ Non-temporal store of quadword from an MMX register into memory
MOVNTPS Non-temporal store of four packed single-pre
cision floating-point values from an XMM register
into memory
PREFETCHh
Load 32 or more of bytes from memory to a
selected level of the processor’s cache hierarchy
SFENCE Serializes store operations

5.6 SSE2 INSTRUCTIONS
5.6.1 SSE2 Packed and Scalar Double-Precision Floating-Point
Instructions

SSE2 packed and scalar double-precision floating-point instructions
are divided into the following subordinate 
subgroups: data movement, arithmetic, comparison, conversi
on, logical, and shuffle operations on double-precision
floating-point operands. These are introduced in the sections that
follow.

5.6.1.1 SSE2 Data Movement Instructions
SSE2 data movement instructions move double-precision
floating-point data between XMM registers and between
XMM registers and memory.

MOVAPD Move two aligned packed double-precision
floating-point values between XMM registers or
between and XMM register and memory

MOVUPD Move two unaligned packed double-precision
floating-point values between XMM registers or
between and XMM register and memory

MOVHPD Move high packed double-precision floating-p
oint value to an from the high quadword of an
XMM register and memory

MOVLPD Move low packed single-precision floating-poi
nt value to an from the low quadword of an XMM
register and memory

MOVMSKPD Extract sign mask from two packed
double-precision floating-point values

MOVSD Move scalar double-precision floating-point
value between XMM registers or between an XMM
register and memory

5.6.1.2 SSE2 Packed Arithmetic Instructions
The arithmetic instructions perform addition, subtractio
n, multiply, divide, square
root, and maximum/minimum
operations on packed and scalar double-precision floating-point
operands.

ADDPD Add packed double-precision floating-point values
ADDSD Add scalar double precision floating-point values
SUBPD Subtract scalar double-precision floating-point values
SUBSD Subtract scalar double-precision floating-point values
MULPD Multiply packed double-precision floating-point values
MULSD Multiply scalar double-precision floating-point values
DIVPD Divide packed double-precision floating-point values
DIVSD Divide scalar double-precision floating-point values
SQRTPD Compute packed square roots of packed double-precision floating-point values
SQRTSD Compute scalar square root of scalar double-precision floating-point values
MAXPD Return maximum packed double-precision floating-point values
MAXSD Return maximum scalar double-precision floating-point values
MINPD Return minimum packed double-precision floating-point values
MINSD Return minimum scalar double-precision floating-point values

5.6.1.3 SSE2 Logical Instructions
SSE2 logical instructions preform AND, AND NOT, OR, and XOR operations
on packed double-precision floating-point values.

ANDPD Perform bitwise logical AND of packed
double-precision floating-point values

ANDNPD Perform bitwise logical AND NOT of packed
double-precision floating-point values

ORPD Perform bitwise logical OR of packed
double-precision floating-point values

XORPD Perform bitwise logical XOR of packed
double-precision floating-point values

5.6.1.4 SSE2 Compare Instructions
SSE2 compare instructions compare packed and scalar do
uble-precision floating-point values and return the
results of the comparison either to the destination operand or to the
EFLAGS register.

CMPPD Compare packed double-precision floating-point values
CMPSD Compare scalar double-precision floating-point values
COMISD Perform ordered comparison of scalar double-precision
floating-point values and set flags in EFLAGS register
UCOMISD Perform unordered comparison of scalar double-precision
floating-point values and set flags in EFLAGS register.

5.6.1.5 SSE2 Shuffle and Unpack Instructions
SSE2 shuffle and unpack instructions shuffle or interleave
double-precision floating-point values in packed double-
precision floating-point operands.

SHUFPD Shuffles values in packed double-precision floating-point
operands
UNPCKHPD Unpacks and interleaves the high values
from two packed double-precision floating-point
operands
UNPCKLPD Unpacks and interleaves the low values from
two packed double-precision floating-point oper-
ands

5.6.1.6 SSE2 Conversion Instructions
SSE2 conversion instructions convert packed and individu
al doubleword integers into packed and scalar double-precision
floating-point values and vice versa. They also convert between packed and scalar single-precision and
double-precision floating-point values.

CVTPD2PI Convert packed double-precision floating-point values to
packed doubleword integers.

CVTTPD2PI Convert with truncation packed double-preci
sion floating-point values to packed doubleword
integers

CVTPI2PD Convert packed doubleword integers to
packed double-precision floating-point values

CVTPD2DQ Convert packed double-precision floating-point values to
packed doubleword integers

CVTTPD2DQ Convert with truncation packed double-preci
sion floating-point values to packed doubleword
integers

CVTDQ2PD Convert packed doubleword integers to
packed double-precision floating-point values

CVTPS2PD Convert packed single-precision floating-point values to packed double-precision floating-point values

CVTPD2PS Convert packed double-precision floating-point values to packed single-precision floating-point values
CVTSS2SD Convert scalar single-precision floating-point
values to scalar double-precision floating-point values
CVTSD2SS Convert scalar double-precision floating-point
values to scalar single-precision floating-point values
CVTSD2SI Convert scalar double-precision floating-point values to a doubleword integer
CVTTSD2SI Convert with truncation scalar double-precision
floating-point values to scalar doubleword integers
CVTSI2SD Convert doubleword integer to scalar double-precision floating-point value

5.6.2 SSE2 Packed Single-Precision Floating-Point Instructions
SSE2 packed single-precision floating-point instructions perform conversion operations on single-precision
floating-point and integer operands. These instructions
represent enhancements to the SSE single-precision
floating-point instructions.

CVTDQ2PS Convert packed doubleword integers to
packed single-precision floating-point values

CVTPS2DQ Convert packed single-precision floating
-point values to packed doubleword integers

CVTTPS2DQ Convert with truncation packed single-preci
sion floating-point values to packed doubleword
integers

5.6.3 SSE2 128-Bit SIMD Integer Instructions
SSE2 SIMD integer instructions perform additional oper
ations on packed words, doublewords, and quadwords
contained in XMM and MMX registers.
MOVDQA Move aligned double quadword.
MOVDQU Move unaligned double quadword
MOVQ2DQ Move quadword integer from MMX to XMM registers
MOVDQ2Q Move quadword integer from XMM to MMX registers
PMULUDQ Multiply packed unsigned doubleword integers
PADDQ Add packed quadword integers
PSUBQ Subtract packed
quadword integers
PSHUFLW Shuffle packed low words
PSHUFHW Shuffle packed high words
PSHUFD Shuffle packed doublewords
PSLLDQ Shift double quadword left logical
PSRLDQ Shift double quadword right logical
PUNPCKHQDQ Unpack high quadwords
PUNPCKLQDQ Unpack low quadwords

5.6.4 SSE2 Cacheability Control and Ordering Instructions
SSE2 cacheability control instructions provide additional op
erations for caching of non-temporal data when storing
data from XMM registers to memory. LFENCE and MFENCE provide additional control of instruction ordering on
store operations.

CLFLUSH Flushes and invalidates a memory operand and
its associated cache line from all levels of the
processor’s cache hierarchy

LFENCE Serializes load operations
MFENCE Serializes load and store operations
PAUSE Improves the performance of “spin-wait loops”
MASKMOVDQU Non-temporal store of selected bytes from
an XMM register into memory
MOVNTPD Non-temporal store of two packed double-preci
sion floating-point values from an XMM register
into memory
MOVNTDQ Non-temporal store of double quad
word from an XMM register into memory
MOVNTI Non-temporal store of a doubleword from a general-purpose register into memory
